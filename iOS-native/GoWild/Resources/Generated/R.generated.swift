//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 25 colors.
  struct color {
    /// Color `AppBgBlack`.
    static let appBgBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppBgBlack")
    /// Color `AppBgColor`.
    static let appBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppBgColor")
    /// Color `AppChatBgColor`.
    static let appChatBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppChatBgColor")
    /// Color `AppInputBarColor`.
    static let appInputBarColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppInputBarColor")
    /// Color `AppLightBlueColor`.
    static let appLightBlueColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppLightBlueColor")
    /// Color `AppLightBrownColor`.
    static let appLightBrownColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppLightBrownColor")
    /// Color `AppLightGreenBgColor`.
    static let appLightGreenBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppLightGreenBgColor")
    /// Color `AppOrangeBgColor`.
    static let appOrangeBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppOrangeBgColor")
    /// Color `AppRedColor`.
    static let appRedColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppRedColor")
    /// Color `AppTabbarBgColor`.
    static let appTabbarBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppTabbarBgColor")
    /// Color `AppWhiteColor`.
    static let appWhiteColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppWhiteColor")
    /// Color `AppYellowColor`.
    static let appYellowColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppYellowColor")
    /// Color `CardBorderColor`.
    static let cardBorderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "CardBorderColor")
    /// Color `RoutePolylineColor`.
    static let routePolylineColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "RoutePolylineColor")
    /// Color `RoutePolylineGreenColor`.
    static let routePolylineGreenColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "RoutePolylineGreenColor")
    /// Color `RoutePolylineOrangeColor`.
    static let routePolylineOrangeColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "RoutePolylineOrangeColor")
    /// Color `SupportPlaceHolderColor`.
    static let supportPlaceHolderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "SupportPlaceHolderColor")
    /// Color `TextDarkGrayColor`.
    static let textDarkGrayColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextDarkGrayColor")
    /// Color `TextDarkOrangeColor`.
    static let textDarkOrangeColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextDarkOrangeColor")
    /// Color `TextFieldBgColor`.
    static let textFieldBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextFieldBgColor")
    /// Color `TextFieldBorderColor`.
    static let textFieldBorderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextFieldBorderColor")
    /// Color `TextLightGrayColor`.
    static let textLightGrayColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextLightGrayColor")
    /// Color `TextLightOrangeColor`.
    static let textLightOrangeColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextLightOrangeColor")
    /// Color `TextLightYellow`.
    static let textLightYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextLightYellow")
    /// Color `UserPolylineColor`.
    static let userPolylineColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "UserPolylineColor")
    
    /// `UIColor(named: "AppBgBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appBgBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appBgBlack, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appBgColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppChatBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appChatBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appChatBgColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppInputBarColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appInputBarColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appInputBarColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppLightBlueColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appLightBlueColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appLightBlueColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppLightBrownColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appLightBrownColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appLightBrownColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppLightGreenBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appLightGreenBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appLightGreenBgColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppOrangeBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appOrangeBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appOrangeBgColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppRedColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appRedColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appRedColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppTabbarBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appTabbarBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appTabbarBgColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppWhiteColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appWhiteColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appWhiteColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppYellowColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appYellowColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appYellowColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "CardBorderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cardBorderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cardBorderColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "RoutePolylineColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func routePolylineColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.routePolylineColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "RoutePolylineGreenColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func routePolylineGreenColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.routePolylineGreenColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "RoutePolylineOrangeColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func routePolylineOrangeColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.routePolylineOrangeColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "SupportPlaceHolderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func supportPlaceHolderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.supportPlaceHolderColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TextDarkGrayColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textDarkGrayColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textDarkGrayColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TextDarkOrangeColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textDarkOrangeColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textDarkOrangeColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TextFieldBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldBgColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TextFieldBorderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldBorderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldBorderColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TextLightGrayColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textLightGrayColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textLightGrayColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TextLightOrangeColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textLightOrangeColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textLightOrangeColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "TextLightYellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textLightYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textLightYellow, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "UserPolylineColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func userPolylineColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.userPolylineColor, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `Configuration.plist`.
    static let configurationPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Configuration", pathExtension: "plist")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "Configuration", withExtension: "plist")`
    static func configurationPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configurationPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 15 fonts.
  struct font: Rswift.Validatable {
    /// Font `Digital-7`.
    static let digital7 = Rswift.FontResource(fontName: "Digital-7")
    /// Font `DigitalNumbers-Regular`.
    static let digitalNumbersRegular = Rswift.FontResource(fontName: "DigitalNumbers-Regular")
    /// Font `SourceSansPro-BlackItalic`.
    static let sourceSansProBlackItalic = Rswift.FontResource(fontName: "SourceSansPro-BlackItalic")
    /// Font `SourceSansPro-Black`.
    static let sourceSansProBlack = Rswift.FontResource(fontName: "SourceSansPro-Black")
    /// Font `SourceSansPro-BoldItalic`.
    static let sourceSansProBoldItalic = Rswift.FontResource(fontName: "SourceSansPro-BoldItalic")
    /// Font `SourceSansPro-Bold`.
    static let sourceSansProBold = Rswift.FontResource(fontName: "SourceSansPro-Bold")
    /// Font `SourceSansPro-ExtraLightItalic`.
    static let sourceSansProExtraLightItalic = Rswift.FontResource(fontName: "SourceSansPro-ExtraLightItalic")
    /// Font `SourceSansPro-ExtraLight`.
    static let sourceSansProExtraLight = Rswift.FontResource(fontName: "SourceSansPro-ExtraLight")
    /// Font `SourceSansPro-Italic`.
    static let sourceSansProItalic = Rswift.FontResource(fontName: "SourceSansPro-Italic")
    /// Font `SourceSansPro-LightItalic`.
    static let sourceSansProLightItalic = Rswift.FontResource(fontName: "SourceSansPro-LightItalic")
    /// Font `SourceSansPro-Light`.
    static let sourceSansProLight = Rswift.FontResource(fontName: "SourceSansPro-Light")
    /// Font `SourceSansPro-Regular`.
    static let sourceSansProRegular = Rswift.FontResource(fontName: "SourceSansPro-Regular")
    /// Font `SourceSansPro-SemiBoldItalic`.
    static let sourceSansProSemiBoldItalic = Rswift.FontResource(fontName: "SourceSansPro-SemiBoldItalic")
    /// Font `SourceSansPro-SemiBold`.
    static let sourceSansProSemiBold = Rswift.FontResource(fontName: "SourceSansPro-SemiBold")
    /// Font `TheForegenRoughOne`.
    static let theForegenRoughOne = Rswift.FontResource(fontName: "TheForegenRoughOne")
    
    /// `UIFont(name: "Digital-7", size: ...)`
    static func digital7(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: digital7, size: size)
    }
    
    /// `UIFont(name: "DigitalNumbers-Regular", size: ...)`
    static func digitalNumbersRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: digitalNumbersRegular, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-Black", size: ...)`
    static func sourceSansProBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProBlack, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-BlackItalic", size: ...)`
    static func sourceSansProBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProBlackItalic, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-Bold", size: ...)`
    static func sourceSansProBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProBold, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-BoldItalic", size: ...)`
    static func sourceSansProBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProBoldItalic, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-ExtraLight", size: ...)`
    static func sourceSansProExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProExtraLight, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-ExtraLightItalic", size: ...)`
    static func sourceSansProExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProExtraLightItalic, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-Italic", size: ...)`
    static func sourceSansProItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProItalic, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-Light", size: ...)`
    static func sourceSansProLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProLight, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-LightItalic", size: ...)`
    static func sourceSansProLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProLightItalic, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-Regular", size: ...)`
    static func sourceSansProRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProRegular, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-SemiBold", size: ...)`
    static func sourceSansProSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProSemiBold, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-SemiBoldItalic", size: ...)`
    static func sourceSansProSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProSemiBoldItalic, size: size)
    }
    
    /// `UIFont(name: "TheForegenRoughOne", size: ...)`
    static func theForegenRoughOne(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: theForegenRoughOne, size: size)
    }
    
    static func validate() throws {
      if R.font.digital7(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Digital-7' could not be loaded, is 'digital-7.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.digitalNumbersRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'DigitalNumbers-Regular' could not be loaded, is 'digitalnumbers-regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Black' could not be loaded, is 'SourceSansPro-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-BlackItalic' could not be loaded, is 'SourceSansPro-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Bold' could not be loaded, is 'SourceSansPro-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-BoldItalic' could not be loaded, is 'SourceSansPro-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-ExtraLight' could not be loaded, is 'SourceSansPro-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-ExtraLightItalic' could not be loaded, is 'SourceSansPro-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Italic' could not be loaded, is 'SourceSansPro-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Light' could not be loaded, is 'SourceSansPro-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-LightItalic' could not be loaded, is 'SourceSansPro-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Regular' could not be loaded, is 'SourceSansPro-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-SemiBold' could not be loaded, is 'SourceSansPro-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-SemiBoldItalic' could not be loaded, is 'SourceSansPro-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.theForegenRoughOne(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'TheForegenRoughOne' could not be loaded, is 'FontsFree-Net-TheForegenRoughOne.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 114 images.
  struct image {
    /// Image `GoWildIcon`.
    static let goWildIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "GoWildIcon")
    /// Image `LoginBtnBgImage`.
    static let loginBtnBgImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoginBtnBgImage")
    /// Image `Route_Map`.
    static let route_Map = Rswift.ImageResource(bundle: R.hostingBundle, name: "Route_Map")
    /// Image `SplashImageOne`.
    static let splashImageOne = Rswift.ImageResource(bundle: R.hostingBundle, name: "SplashImageOne")
    /// Image `add_image_icon`.
    static let add_image_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_image_icon")
    /// Image `customSplashBG`.
    static let customSplashBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "customSplashBG")
    /// Image `fbLoginImage`.
    static let fbLoginImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "fbLoginImage")
    /// Image `friend_request_bg`.
    static let friend_request_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "friend_request_bg")
    /// Image `friends_post_image`.
    static let friends_post_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "friends_post_image")
    /// Image `googleLoginImage`.
    static let googleLoginImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "googleLoginImage")
    /// Image `home_bg`.
    static let home_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_bg")
    /// Image `ic_accept_request`.
    static let ic_accept_request = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_accept_request")
    /// Image `ic_add_friend_icon`.
    static let ic_add_friend_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_friend_icon")
    /// Image `ic_adventure_image`.
    static let ic_adventure_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_adventure_image")
    /// Image `ic_attachment_icon`.
    static let ic_attachment_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_attachment_icon")
    /// Image `ic_back_ic_card_image`.
    static let ic_back_ic_card_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_ic_card_image")
    /// Image `ic_back_icon`.
    static let ic_back_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_icon")
    /// Image `ic_blue_circle`.
    static let ic_blue_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blue_circle")
    /// Image `ic_calender_icon`.
    static let ic_calender_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calender_icon")
    /// Image `ic_camera_image`.
    static let ic_camera_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera_image")
    /// Image `ic_cancel_request`.
    static let ic_cancel_request = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cancel_request")
    /// Image `ic_cancel`.
    static let ic_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cancel")
    /// Image `ic_chat_attachment_image`.
    static let ic_chat_attachment_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chat_attachment_image")
    /// Image `ic_chat_camera_image`.
    static let ic_chat_camera_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chat_camera_image")
    /// Image `ic_chat_icon`.
    static let ic_chat_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chat_icon")
    /// Image `ic_chat_send_btn_image`.
    static let ic_chat_send_btn_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chat_send_btn_image")
    /// Image `ic_check_icon_`.
    static let ic_check_icon_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_icon_")
    /// Image `ic_check_icon`.
    static let ic_check_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_icon")
    /// Image `ic_chevron_black_down`.
    static let ic_chevron_black_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chevron_black_down")
    /// Image `ic_chevron_black_up`.
    static let ic_chevron_black_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chevron_black_up")
    /// Image `ic_chevron_down`.
    static let ic_chevron_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chevron_down")
    /// Image `ic_chevron_right`.
    static let ic_chevron_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chevron_right")
    /// Image `ic_create_trails_icon`.
    static let ic_create_trails_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_create_trails_icon")
    /// Image `ic_current_location_image_green`.
    static let ic_current_location_image_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_current_location_image_green")
    /// Image `ic_current_location_image`.
    static let ic_current_location_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_current_location_image")
    /// Image `ic_delete_friend_icon`.
    static let ic_delete_friend_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_friend_icon")
    /// Image `ic_delete_icon`.
    static let ic_delete_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_icon")
    /// Image `ic_delete_pic_image`.
    static let ic_delete_pic_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_pic_image")
    /// Image `ic_delete_route_icon`.
    static let ic_delete_route_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_route_icon")
    /// Image `ic_destination_location_image`.
    static let ic_destination_location_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_destination_location_image")
    /// Image `ic_destination_marker`.
    static let ic_destination_marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_destination_marker")
    /// Image `ic_drop_down_icon`.
    static let ic_drop_down_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_drop_down_icon")
    /// Image `ic_edit_route_icon`.
    static let ic_edit_route_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit_route_icon")
    /// Image `ic_event_detail_bg_image`.
    static let ic_event_detail_bg_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_event_detail_bg_image")
    /// Image `ic_faq_down_icon`.
    static let ic_faq_down_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_faq_down_icon")
    /// Image `ic_faq_left_icon`.
    static let ic_faq_left_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_faq_left_icon")
    /// Image `ic_first_position`.
    static let ic_first_position = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_first_position")
    /// Image `ic_forth_position`.
    static let ic_forth_position = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_forth_position")
    /// Image `ic_friend_1`.
    static let ic_friend_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_friend_1")
    /// Image `ic_friend_2`.
    static let ic_friend_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_friend_2")
    /// Image `ic_friend_3`.
    static let ic_friend_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_friend_3")
    /// Image `ic_front_id_card_image`.
    static let ic_front_id_card_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_front_id_card_image")
    /// Image `ic_gold_icon`.
    static let ic_gold_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_gold_icon")
    /// Image `ic_hide_post`.
    static let ic_hide_post = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hide_post")
    /// Image `ic_historical_marker`.
    static let ic_historical_marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_historical_marker")
    /// Image `ic_location_icon`.
    static let ic_location_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location_icon")
    /// Image `ic_logo`.
    static let ic_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo")
    /// Image `ic_map_1_image`.
    static let ic_map_1_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_map_1_image")
    /// Image `ic_map_2_image`.
    static let ic_map_2_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_map_2_image")
    /// Image `ic_map_3_image`.
    static let ic_map_3_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_map_3_image")
    /// Image `ic_map_overlay_btn_icon`.
    static let ic_map_overlay_btn_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_map_overlay_btn_icon")
    /// Image `ic_new_post_icon`.
    static let ic_new_post_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_new_post_icon")
    /// Image `ic_old_paper`.
    static let ic_old_paper = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_old_paper")
    /// Image `ic_outdoors_map`.
    static let ic_outdoors_map = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_outdoors_map")
    /// Image `ic_people_1`.
    static let ic_people_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_people_1")
    /// Image `ic_people_3`.
    static let ic_people_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_people_3")
    /// Image `ic_people`.
    static let ic_people = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_people")
    /// Image `ic_post_comment_icon`.
    static let ic_post_comment_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_post_comment_icon")
    /// Image `ic_post_like_icon`.
    static let ic_post_like_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_post_like_icon")
    /// Image `ic_post_share_icon`.
    static let ic_post_share_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_post_share_icon")
    /// Image `ic_post_views_icon`.
    static let ic_post_views_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_post_views_icon")
    /// Image `ic_profile_tree_image_1`.
    static let ic_profile_tree_image_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_tree_image_1")
    /// Image `ic_profile_tree_image`.
    static let ic_profile_tree_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_tree_image")
    /// Image `ic_road_map`.
    static let ic_road_map = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_road_map")
    /// Image `ic_satelite_map`.
    static let ic_satelite_map = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_satelite_map")
    /// Image `ic_satellite_map`.
    static let ic_satellite_map = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_satellite_map")
    /// Image `ic_search_icon`.
    static let ic_search_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_icon")
    /// Image `ic_second_position`.
    static let ic_second_position = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_second_position")
    /// Image `ic_selfie_verify_image`.
    static let ic_selfie_verify_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_selfie_verify_image")
    /// Image `ic_send_icon`.
    static let ic_send_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_send_icon")
    /// Image `ic_send_message`.
    static let ic_send_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_send_message")
    /// Image `ic_setting_editprofile_icon`.
    static let ic_setting_editprofile_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_editprofile_icon")
    /// Image `ic_setting_faq_icon`.
    static let ic_setting_faq_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_faq_icon")
    /// Image `ic_setting_logout_icon`.
    static let ic_setting_logout_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_logout_icon")
    /// Image `ic_setting_message_icon`.
    static let ic_setting_message_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_message_icon")
    /// Image `ic_setting_notification_icon`.
    static let ic_setting_notification_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_notification_icon")
    /// Image `ic_setting_payment_icon`.
    static let ic_setting_payment_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_payment_icon")
    /// Image `ic_setting_profile_icon`.
    static let ic_setting_profile_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_profile_icon")
    /// Image `ic_setting_races_icon`.
    static let ic_setting_races_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_races_icon")
    /// Image `ic_setting_subscription_icon`.
    static let ic_setting_subscription_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_subscription_icon")
    /// Image `ic_setting_support_icon`.
    static let ic_setting_support_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_support_icon")
    /// Image `ic_share_route_icon`.
    static let ic_share_route_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_route_icon")
    /// Image `ic_show_more_btn_image`.
    static let ic_show_more_btn_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_show_more_btn_image")
    /// Image `ic_source_location_image`.
    static let ic_source_location_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_source_location_image")
    /// Image `ic_source_marker`.
    static let ic_source_marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_source_marker")
    /// Image `ic_street_map`.
    static let ic_street_map = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_street_map")
    /// Image `ic_tabbar_camera_ar`.
    static let ic_tabbar_camera_ar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_camera_ar")
    /// Image `ic_tabbar_home`.
    static let ic_tabbar_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_home")
    /// Image `ic_tabbar_map`.
    static let ic_tabbar_map = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_map")
    /// Image `ic_tabbar_online_store`.
    static let ic_tabbar_online_store = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_online_store")
    /// Image `ic_tabbar_profile`.
    static let ic_tabbar_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_profile")
    /// Image `ic_terrain_map`.
    static let ic_terrain_map = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_terrain_map")
    /// Image `ic_third_position`.
    static let ic_third_position = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_third_position")
    /// Image `ic_time_icon`.
    static let ic_time_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_time_icon")
    /// Image `ic_uncheck_icon`.
    static let ic_uncheck_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uncheck_icon")
    /// Image `ic_user_placeholder_image_`.
    static let ic_user_placeholder_image_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_placeholder_image_")
    /// Image `ic_user_placeholder_image`.
    static let ic_user_placeholder_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_placeholder_image")
    /// Image `ic_zoom_in_image`.
    static let ic_zoom_in_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_zoom_in_image")
    /// Image `ic_zoom_out_image`.
    static let ic_zoom_out_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_zoom_out_image")
    /// Image `loader_compass`.
    static let loader_compass = Rswift.ImageResource(bundle: R.hostingBundle, name: "loader_compass")
    /// Image `loader`.
    static let loader = Rswift.ImageResource(bundle: R.hostingBundle, name: "loader")
    /// Image `loginStemImage`.
    static let loginStemImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginStemImage")
    /// Image `pdf_image`.
    static let pdf_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "pdf_image")
    /// Image `splashBtnIcon`.
    static let splashBtnIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashBtnIcon")
    
    /// `UIImage(named: "GoWildIcon", bundle: ..., traitCollection: ...)`
    static func goWildIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goWildIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LoginBtnBgImage", bundle: ..., traitCollection: ...)`
    static func loginBtnBgImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginBtnBgImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Route_Map", bundle: ..., traitCollection: ...)`
    static func route_Map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.route_Map, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SplashImageOne", bundle: ..., traitCollection: ...)`
    static func splashImageOne(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashImageOne, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add_image_icon", bundle: ..., traitCollection: ...)`
    static func add_image_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_image_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "customSplashBG", bundle: ..., traitCollection: ...)`
    static func customSplashBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.customSplashBG, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fbLoginImage", bundle: ..., traitCollection: ...)`
    static func fbLoginImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fbLoginImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "friend_request_bg", bundle: ..., traitCollection: ...)`
    static func friend_request_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friend_request_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "friends_post_image", bundle: ..., traitCollection: ...)`
    static func friends_post_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friends_post_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "googleLoginImage", bundle: ..., traitCollection: ...)`
    static func googleLoginImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleLoginImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_bg", bundle: ..., traitCollection: ...)`
    static func home_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_accept_request", bundle: ..., traitCollection: ...)`
    static func ic_accept_request(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_accept_request, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_friend_icon", bundle: ..., traitCollection: ...)`
    static func ic_add_friend_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_friend_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_adventure_image", bundle: ..., traitCollection: ...)`
    static func ic_adventure_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_adventure_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_attachment_icon", bundle: ..., traitCollection: ...)`
    static func ic_attachment_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_attachment_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_back_ic_card_image", bundle: ..., traitCollection: ...)`
    static func ic_back_ic_card_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_ic_card_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_back_icon", bundle: ..., traitCollection: ...)`
    static func ic_back_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_blue_circle", bundle: ..., traitCollection: ...)`
    static func ic_blue_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blue_circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_calender_icon", bundle: ..., traitCollection: ...)`
    static func ic_calender_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calender_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_camera_image", bundle: ..., traitCollection: ...)`
    static func ic_camera_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cancel", bundle: ..., traitCollection: ...)`
    static func ic_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cancel_request", bundle: ..., traitCollection: ...)`
    static func ic_cancel_request(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cancel_request, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chat_attachment_image", bundle: ..., traitCollection: ...)`
    static func ic_chat_attachment_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chat_attachment_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chat_camera_image", bundle: ..., traitCollection: ...)`
    static func ic_chat_camera_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chat_camera_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chat_icon", bundle: ..., traitCollection: ...)`
    static func ic_chat_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chat_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chat_send_btn_image", bundle: ..., traitCollection: ...)`
    static func ic_chat_send_btn_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chat_send_btn_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_check_icon", bundle: ..., traitCollection: ...)`
    static func ic_check_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_check_icon_", bundle: ..., traitCollection: ...)`
    static func ic_check_icon_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_icon_, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chevron_black_down", bundle: ..., traitCollection: ...)`
    static func ic_chevron_black_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chevron_black_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chevron_black_up", bundle: ..., traitCollection: ...)`
    static func ic_chevron_black_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chevron_black_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chevron_down", bundle: ..., traitCollection: ...)`
    static func ic_chevron_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chevron_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chevron_right", bundle: ..., traitCollection: ...)`
    static func ic_chevron_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chevron_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_create_trails_icon", bundle: ..., traitCollection: ...)`
    static func ic_create_trails_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_create_trails_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_current_location_image", bundle: ..., traitCollection: ...)`
    static func ic_current_location_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_current_location_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_current_location_image_green", bundle: ..., traitCollection: ...)`
    static func ic_current_location_image_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_current_location_image_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_delete_friend_icon", bundle: ..., traitCollection: ...)`
    static func ic_delete_friend_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_friend_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_delete_icon", bundle: ..., traitCollection: ...)`
    static func ic_delete_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_delete_pic_image", bundle: ..., traitCollection: ...)`
    static func ic_delete_pic_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_pic_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_delete_route_icon", bundle: ..., traitCollection: ...)`
    static func ic_delete_route_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_route_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_destination_location_image", bundle: ..., traitCollection: ...)`
    static func ic_destination_location_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_destination_location_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_destination_marker", bundle: ..., traitCollection: ...)`
    static func ic_destination_marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_destination_marker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_drop_down_icon", bundle: ..., traitCollection: ...)`
    static func ic_drop_down_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_drop_down_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_edit_route_icon", bundle: ..., traitCollection: ...)`
    static func ic_edit_route_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit_route_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_event_detail_bg_image", bundle: ..., traitCollection: ...)`
    static func ic_event_detail_bg_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_event_detail_bg_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_faq_down_icon", bundle: ..., traitCollection: ...)`
    static func ic_faq_down_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_faq_down_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_faq_left_icon", bundle: ..., traitCollection: ...)`
    static func ic_faq_left_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_faq_left_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_first_position", bundle: ..., traitCollection: ...)`
    static func ic_first_position(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_first_position, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_forth_position", bundle: ..., traitCollection: ...)`
    static func ic_forth_position(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_forth_position, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_friend_1", bundle: ..., traitCollection: ...)`
    static func ic_friend_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_friend_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_friend_2", bundle: ..., traitCollection: ...)`
    static func ic_friend_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_friend_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_friend_3", bundle: ..., traitCollection: ...)`
    static func ic_friend_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_friend_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_front_id_card_image", bundle: ..., traitCollection: ...)`
    static func ic_front_id_card_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_front_id_card_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_gold_icon", bundle: ..., traitCollection: ...)`
    static func ic_gold_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_gold_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_hide_post", bundle: ..., traitCollection: ...)`
    static func ic_hide_post(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_hide_post, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_historical_marker", bundle: ..., traitCollection: ...)`
    static func ic_historical_marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_historical_marker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_location_icon", bundle: ..., traitCollection: ...)`
    static func ic_location_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_logo", bundle: ..., traitCollection: ...)`
    static func ic_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_map_1_image", bundle: ..., traitCollection: ...)`
    static func ic_map_1_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_map_1_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_map_2_image", bundle: ..., traitCollection: ...)`
    static func ic_map_2_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_map_2_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_map_3_image", bundle: ..., traitCollection: ...)`
    static func ic_map_3_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_map_3_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_map_overlay_btn_icon", bundle: ..., traitCollection: ...)`
    static func ic_map_overlay_btn_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_map_overlay_btn_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_new_post_icon", bundle: ..., traitCollection: ...)`
    static func ic_new_post_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_new_post_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_old_paper", bundle: ..., traitCollection: ...)`
    static func ic_old_paper(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_old_paper, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_outdoors_map", bundle: ..., traitCollection: ...)`
    static func ic_outdoors_map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_outdoors_map, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_people", bundle: ..., traitCollection: ...)`
    static func ic_people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_people, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_people_1", bundle: ..., traitCollection: ...)`
    static func ic_people_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_people_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_people_3", bundle: ..., traitCollection: ...)`
    static func ic_people_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_people_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_post_comment_icon", bundle: ..., traitCollection: ...)`
    static func ic_post_comment_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_post_comment_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_post_like_icon", bundle: ..., traitCollection: ...)`
    static func ic_post_like_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_post_like_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_post_share_icon", bundle: ..., traitCollection: ...)`
    static func ic_post_share_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_post_share_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_post_views_icon", bundle: ..., traitCollection: ...)`
    static func ic_post_views_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_post_views_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_profile_tree_image", bundle: ..., traitCollection: ...)`
    static func ic_profile_tree_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_tree_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_profile_tree_image_1", bundle: ..., traitCollection: ...)`
    static func ic_profile_tree_image_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_tree_image_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_road_map", bundle: ..., traitCollection: ...)`
    static func ic_road_map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_road_map, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_satelite_map", bundle: ..., traitCollection: ...)`
    static func ic_satelite_map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_satelite_map, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_satellite_map", bundle: ..., traitCollection: ...)`
    static func ic_satellite_map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_satellite_map, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search_icon", bundle: ..., traitCollection: ...)`
    static func ic_search_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_second_position", bundle: ..., traitCollection: ...)`
    static func ic_second_position(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_second_position, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_selfie_verify_image", bundle: ..., traitCollection: ...)`
    static func ic_selfie_verify_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_selfie_verify_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_send_icon", bundle: ..., traitCollection: ...)`
    static func ic_send_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_send_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_send_message", bundle: ..., traitCollection: ...)`
    static func ic_send_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_send_message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_editprofile_icon", bundle: ..., traitCollection: ...)`
    static func ic_setting_editprofile_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_editprofile_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_faq_icon", bundle: ..., traitCollection: ...)`
    static func ic_setting_faq_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_faq_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_logout_icon", bundle: ..., traitCollection: ...)`
    static func ic_setting_logout_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_logout_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_message_icon", bundle: ..., traitCollection: ...)`
    static func ic_setting_message_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_message_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_notification_icon", bundle: ..., traitCollection: ...)`
    static func ic_setting_notification_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_notification_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_payment_icon", bundle: ..., traitCollection: ...)`
    static func ic_setting_payment_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_payment_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_profile_icon", bundle: ..., traitCollection: ...)`
    static func ic_setting_profile_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_profile_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_races_icon", bundle: ..., traitCollection: ...)`
    static func ic_setting_races_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_races_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_subscription_icon", bundle: ..., traitCollection: ...)`
    static func ic_setting_subscription_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_subscription_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_support_icon", bundle: ..., traitCollection: ...)`
    static func ic_setting_support_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_support_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_route_icon", bundle: ..., traitCollection: ...)`
    static func ic_share_route_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_route_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_show_more_btn_image", bundle: ..., traitCollection: ...)`
    static func ic_show_more_btn_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_show_more_btn_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_source_location_image", bundle: ..., traitCollection: ...)`
    static func ic_source_location_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_source_location_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_source_marker", bundle: ..., traitCollection: ...)`
    static func ic_source_marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_source_marker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_street_map", bundle: ..., traitCollection: ...)`
    static func ic_street_map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_street_map, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_camera_ar", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_camera_ar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_camera_ar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_home", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_map", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_map, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_online_store", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_online_store(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_online_store, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_profile", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_terrain_map", bundle: ..., traitCollection: ...)`
    static func ic_terrain_map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_terrain_map, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_third_position", bundle: ..., traitCollection: ...)`
    static func ic_third_position(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_third_position, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_time_icon", bundle: ..., traitCollection: ...)`
    static func ic_time_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_time_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_uncheck_icon", bundle: ..., traitCollection: ...)`
    static func ic_uncheck_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uncheck_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_user_placeholder_image", bundle: ..., traitCollection: ...)`
    static func ic_user_placeholder_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_placeholder_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_user_placeholder_image_", bundle: ..., traitCollection: ...)`
    static func ic_user_placeholder_image_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_placeholder_image_, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_zoom_in_image", bundle: ..., traitCollection: ...)`
    static func ic_zoom_in_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_zoom_in_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_zoom_out_image", bundle: ..., traitCollection: ...)`
    static func ic_zoom_out_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_zoom_out_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loader", bundle: ..., traitCollection: ...)`
    static func loader(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loader, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loader_compass", bundle: ..., traitCollection: ...)`
    static func loader_compass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loader_compass, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loginStemImage", bundle: ..., traitCollection: ...)`
    static func loginStemImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginStemImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pdf_image", bundle: ..., traitCollection: ...)`
    static func pdf_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pdf_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splashBtnIcon", bundle: ..., traitCollection: ...)`
    static func splashBtnIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashBtnIcon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 24 nibs.
  struct nib {
    /// Nib `CommentCell`.
    static let commentCell = _R.nib._CommentCell()
    /// Nib `FaqCell`.
    static let faqCell = _R.nib._FaqCell()
    /// Nib `GenderCell`.
    static let genderCell = _R.nib._GenderCell()
    /// Nib `HomeFriendsPostCell`.
    static let homeFriendsPostCell = _R.nib._HomeFriendsPostCell()
    /// Nib `HomeRouteCell`.
    static let homeRouteCell = _R.nib._HomeRouteCell()
    /// Nib `HomeRouteSubCell`.
    static let homeRouteSubCell = _R.nib._HomeRouteSubCell()
    /// Nib `HomeSuggestedFriendsCell`.
    static let homeSuggestedFriendsCell = _R.nib._HomeSuggestedFriendsCell()
    /// Nib `MapCell`.
    static let mapCell = _R.nib._MapCell()
    /// Nib `MapOverlayCell`.
    static let mapOverlayCell = _R.nib._MapOverlayCell()
    /// Nib `MessageCell`.
    static let messageCell = _R.nib._MessageCell()
    /// Nib `MyAchievementCell`.
    static let myAchievementCell = _R.nib._MyAchievementCell()
    /// Nib `NearbyAdventureCell`.
    static let nearbyAdventureCell = _R.nib._NearbyAdventureCell()
    /// Nib `NearbyAdventurePeopleCell`.
    static let nearbyAdventurePeopleCell = _R.nib._NearbyAdventurePeopleCell()
    /// Nib `NotificationCell`.
    static let notificationCell = _R.nib._NotificationCell()
    /// Nib `RouteLeaderboardCell`.
    static let routeLeaderboardCell = _R.nib._RouteLeaderboardCell()
    /// Nib `RunWildRouteCell`.
    static let runWildRouteCell = _R.nib._RunWildRouteCell()
    /// Nib `SettingCell`.
    static let settingCell = _R.nib._SettingCell()
    /// Nib `SponsoredCell`.
    static let sponsoredCell = _R.nib._SponsoredCell()
    /// Nib `SupportAttachmentCell`.
    static let supportAttachmentCell = _R.nib._SupportAttachmentCell()
    /// Nib `SupportCell`.
    static let supportCell = _R.nib._SupportCell()
    /// Nib `SupportMessageCell`.
    static let supportMessageCell = _R.nib._SupportMessageCell()
    /// Nib `SupportPicCell`.
    static let supportPicCell = _R.nib._SupportPicCell()
    /// Nib `TrailCreatedRouteCell`.
    static let trailCreatedRouteCell = _R.nib._TrailCreatedRouteCell()
    /// Nib `TrailSavedRouteCell`.
    static let trailSavedRouteCell = _R.nib._TrailSavedRouteCell()
    
    /// `UINib(name: "CommentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentCell) instead")
    static func commentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentCell)
    }
    
    /// `UINib(name: "FaqCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.faqCell) instead")
    static func faqCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.faqCell)
    }
    
    /// `UINib(name: "GenderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.genderCell) instead")
    static func genderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.genderCell)
    }
    
    /// `UINib(name: "HomeFriendsPostCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeFriendsPostCell) instead")
    static func homeFriendsPostCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeFriendsPostCell)
    }
    
    /// `UINib(name: "HomeRouteCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeRouteCell) instead")
    static func homeRouteCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeRouteCell)
    }
    
    /// `UINib(name: "HomeRouteSubCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeRouteSubCell) instead")
    static func homeRouteSubCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeRouteSubCell)
    }
    
    /// `UINib(name: "HomeSuggestedFriendsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeSuggestedFriendsCell) instead")
    static func homeSuggestedFriendsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeSuggestedFriendsCell)
    }
    
    /// `UINib(name: "MapCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mapCell) instead")
    static func mapCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mapCell)
    }
    
    /// `UINib(name: "MapOverlayCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mapOverlayCell) instead")
    static func mapOverlayCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mapOverlayCell)
    }
    
    /// `UINib(name: "MessageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.messageCell) instead")
    static func messageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageCell)
    }
    
    /// `UINib(name: "MyAchievementCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myAchievementCell) instead")
    static func myAchievementCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myAchievementCell)
    }
    
    /// `UINib(name: "NearbyAdventureCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.nearbyAdventureCell) instead")
    static func nearbyAdventureCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.nearbyAdventureCell)
    }
    
    /// `UINib(name: "NearbyAdventurePeopleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.nearbyAdventurePeopleCell) instead")
    static func nearbyAdventurePeopleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.nearbyAdventurePeopleCell)
    }
    
    /// `UINib(name: "NotificationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationCell) instead")
    static func notificationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationCell)
    }
    
    /// `UINib(name: "RouteLeaderboardCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.routeLeaderboardCell) instead")
    static func routeLeaderboardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.routeLeaderboardCell)
    }
    
    /// `UINib(name: "RunWildRouteCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.runWildRouteCell) instead")
    static func runWildRouteCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.runWildRouteCell)
    }
    
    /// `UINib(name: "SettingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingCell) instead")
    static func settingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingCell)
    }
    
    /// `UINib(name: "SponsoredCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sponsoredCell) instead")
    static func sponsoredCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sponsoredCell)
    }
    
    /// `UINib(name: "SupportAttachmentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supportAttachmentCell) instead")
    static func supportAttachmentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supportAttachmentCell)
    }
    
    /// `UINib(name: "SupportCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supportCell) instead")
    static func supportCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supportCell)
    }
    
    /// `UINib(name: "SupportMessageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supportMessageCell) instead")
    static func supportMessageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supportMessageCell)
    }
    
    /// `UINib(name: "SupportPicCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.supportPicCell) instead")
    static func supportPicCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supportPicCell)
    }
    
    /// `UINib(name: "TrailCreatedRouteCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.trailCreatedRouteCell) instead")
    static func trailCreatedRouteCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.trailCreatedRouteCell)
    }
    
    /// `UINib(name: "TrailSavedRouteCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.trailSavedRouteCell) instead")
    static func trailSavedRouteCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.trailSavedRouteCell)
    }
    
    static func commentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentCell? {
      return R.nib.commentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentCell
    }
    
    static func faqCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FaqCell? {
      return R.nib.faqCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FaqCell
    }
    
    static func genderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GenderCell? {
      return R.nib.genderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GenderCell
    }
    
    static func homeFriendsPostCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeFriendsPostCell? {
      return R.nib.homeFriendsPostCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeFriendsPostCell
    }
    
    static func homeRouteCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeRouteCell? {
      return R.nib.homeRouteCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeRouteCell
    }
    
    static func homeRouteSubCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeRouteSubCell? {
      return R.nib.homeRouteSubCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeRouteSubCell
    }
    
    static func homeSuggestedFriendsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeSuggestedFriendsCell? {
      return R.nib.homeSuggestedFriendsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSuggestedFriendsCell
    }
    
    static func mapCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MapCell? {
      return R.nib.mapCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MapCell
    }
    
    static func mapOverlayCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MapOverlayCell? {
      return R.nib.mapOverlayCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MapOverlayCell
    }
    
    static func messageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MessageCell? {
      return R.nib.messageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessageCell
    }
    
    static func myAchievementCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyAchievementCell? {
      return R.nib.myAchievementCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyAchievementCell
    }
    
    static func nearbyAdventureCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NearbyAdventureCell? {
      return R.nib.nearbyAdventureCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NearbyAdventureCell
    }
    
    static func nearbyAdventurePeopleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NearbyAdventurePeopleCell? {
      return R.nib.nearbyAdventurePeopleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NearbyAdventurePeopleCell
    }
    
    static func notificationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
      return R.nib.notificationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
    }
    
    static func routeLeaderboardCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RouteLeaderboardCell? {
      return R.nib.routeLeaderboardCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RouteLeaderboardCell
    }
    
    static func runWildRouteCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RunWildRouteCell? {
      return R.nib.runWildRouteCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RunWildRouteCell
    }
    
    static func settingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingCell? {
      return R.nib.settingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingCell
    }
    
    static func sponsoredCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SponsoredCell? {
      return R.nib.sponsoredCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SponsoredCell
    }
    
    static func supportAttachmentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupportAttachmentCell? {
      return R.nib.supportAttachmentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupportAttachmentCell
    }
    
    static func supportCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupportCell? {
      return R.nib.supportCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupportCell
    }
    
    static func supportMessageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupportMessageCell? {
      return R.nib.supportMessageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupportMessageCell
    }
    
    static func supportPicCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupportPicCell? {
      return R.nib.supportPicCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupportPicCell
    }
    
    static func trailCreatedRouteCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TrailCreatedRouteCell? {
      return R.nib.trailCreatedRouteCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrailCreatedRouteCell
    }
    
    static func trailSavedRouteCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TrailSavedRouteCell? {
      return R.nib.trailSavedRouteCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrailSavedRouteCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 24 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CommentCell`.
    static let commentCell: Rswift.ReuseIdentifier<CommentCell> = Rswift.ReuseIdentifier(identifier: "CommentCell")
    /// Reuse identifier `FaqCell`.
    static let faqCell: Rswift.ReuseIdentifier<FaqCell> = Rswift.ReuseIdentifier(identifier: "FaqCell")
    /// Reuse identifier `GenderCell`.
    static let genderCell: Rswift.ReuseIdentifier<GenderCell> = Rswift.ReuseIdentifier(identifier: "GenderCell")
    /// Reuse identifier `HomeFriendsPostCell`.
    static let homeFriendsPostCell: Rswift.ReuseIdentifier<HomeFriendsPostCell> = Rswift.ReuseIdentifier(identifier: "HomeFriendsPostCell")
    /// Reuse identifier `HomeRouteCell`.
    static let homeRouteCell: Rswift.ReuseIdentifier<HomeRouteCell> = Rswift.ReuseIdentifier(identifier: "HomeRouteCell")
    /// Reuse identifier `HomeRouteSubCell`.
    static let homeRouteSubCell: Rswift.ReuseIdentifier<HomeRouteSubCell> = Rswift.ReuseIdentifier(identifier: "HomeRouteSubCell")
    /// Reuse identifier `HomeSuggestedFriendsCell`.
    static let homeSuggestedFriendsCell: Rswift.ReuseIdentifier<HomeSuggestedFriendsCell> = Rswift.ReuseIdentifier(identifier: "HomeSuggestedFriendsCell")
    /// Reuse identifier `MapCell`.
    static let mapCell: Rswift.ReuseIdentifier<MapCell> = Rswift.ReuseIdentifier(identifier: "MapCell")
    /// Reuse identifier `MapOverlayCell`.
    static let mapOverlayCell: Rswift.ReuseIdentifier<MapOverlayCell> = Rswift.ReuseIdentifier(identifier: "MapOverlayCell")
    /// Reuse identifier `MessageCell`.
    static let messageCell: Rswift.ReuseIdentifier<MessageCell> = Rswift.ReuseIdentifier(identifier: "MessageCell")
    /// Reuse identifier `MyAchievementCell`.
    static let myAchievementCell: Rswift.ReuseIdentifier<MyAchievementCell> = Rswift.ReuseIdentifier(identifier: "MyAchievementCell")
    /// Reuse identifier `NearbyAdventureCell`.
    static let nearbyAdventureCell: Rswift.ReuseIdentifier<NearbyAdventureCell> = Rswift.ReuseIdentifier(identifier: "NearbyAdventureCell")
    /// Reuse identifier `NearbyAdventurePeopleCell`.
    static let nearbyAdventurePeopleCell: Rswift.ReuseIdentifier<NearbyAdventurePeopleCell> = Rswift.ReuseIdentifier(identifier: "NearbyAdventurePeopleCell")
    /// Reuse identifier `NotificationCell`.
    static let notificationCell: Rswift.ReuseIdentifier<NotificationCell> = Rswift.ReuseIdentifier(identifier: "NotificationCell")
    /// Reuse identifier `RouteLeaderboardCell`.
    static let routeLeaderboardCell: Rswift.ReuseIdentifier<RouteLeaderboardCell> = Rswift.ReuseIdentifier(identifier: "RouteLeaderboardCell")
    /// Reuse identifier `RunWildRouteCell`.
    static let runWildRouteCell: Rswift.ReuseIdentifier<RunWildRouteCell> = Rswift.ReuseIdentifier(identifier: "RunWildRouteCell")
    /// Reuse identifier `SettingCell`.
    static let settingCell: Rswift.ReuseIdentifier<SettingCell> = Rswift.ReuseIdentifier(identifier: "SettingCell")
    /// Reuse identifier `SponsoredCell`.
    static let sponsoredCell: Rswift.ReuseIdentifier<SponsoredCell> = Rswift.ReuseIdentifier(identifier: "SponsoredCell")
    /// Reuse identifier `SupportAttachmentCell`.
    static let supportAttachmentCell: Rswift.ReuseIdentifier<SupportAttachmentCell> = Rswift.ReuseIdentifier(identifier: "SupportAttachmentCell")
    /// Reuse identifier `SupportCell`.
    static let supportCell: Rswift.ReuseIdentifier<SupportCell> = Rswift.ReuseIdentifier(identifier: "SupportCell")
    /// Reuse identifier `SupportMessageCell`.
    static let supportMessageCell: Rswift.ReuseIdentifier<SupportMessageCell> = Rswift.ReuseIdentifier(identifier: "SupportMessageCell")
    /// Reuse identifier `SupportPicCell`.
    static let supportPicCell: Rswift.ReuseIdentifier<SupportPicCell> = Rswift.ReuseIdentifier(identifier: "SupportPicCell")
    /// Reuse identifier `TrailCreatedRouteCell`.
    static let trailCreatedRouteCell: Rswift.ReuseIdentifier<TrailCreatedRouteCell> = Rswift.ReuseIdentifier(identifier: "TrailCreatedRouteCell")
    /// Reuse identifier `TrailSavedRouteCell`.
    static let trailSavedRouteCell: Rswift.ReuseIdentifier<TrailSavedRouteCell> = Rswift.ReuseIdentifier(identifier: "TrailSavedRouteCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 14 storyboards.
  struct storyboard {
    /// Storyboard `AuthSB`.
    static let authSB = _R.storyboard.authSB()
    /// Storyboard `CameraSB`.
    static let cameraSB = _R.storyboard.cameraSB()
    /// Storyboard `HomeSB`.
    static let homeSB = _R.storyboard.homeSB()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainTabbarSB`.
    static let mainTabbarSB = _R.storyboard.mainTabbarSB()
    /// Storyboard `MapSB`.
    static let mapSB = _R.storyboard.mapSB()
    /// Storyboard `MessageSB`.
    static let messageSB = _R.storyboard.messageSB()
    /// Storyboard `MyTrailsSB`.
    static let myTrailsSB = _R.storyboard.myTrailsSB()
    /// Storyboard `OnlineStoreSB`.
    static let onlineStoreSB = _R.storyboard.onlineStoreSB()
    /// Storyboard `ProfileSB`.
    static let profileSB = _R.storyboard.profileSB()
    /// Storyboard `RunWildSB`.
    static let runWildSB = _R.storyboard.runWildSB()
    /// Storyboard `SplashSB`.
    static let splashSB = _R.storyboard.splashSB()
    /// Storyboard `SupportSB`.
    static let supportSB = _R.storyboard.supportSB()
    /// Storyboard `TryRouteSB`.
    static let tryRouteSB = _R.storyboard.tryRouteSB()
    
    /// `UIStoryboard(name: "AuthSB", bundle: ...)`
    static func authSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.authSB)
    }
    
    /// `UIStoryboard(name: "CameraSB", bundle: ...)`
    static func cameraSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.cameraSB)
    }
    
    /// `UIStoryboard(name: "HomeSB", bundle: ...)`
    static func homeSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homeSB)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MainTabbarSB", bundle: ...)`
    static func mainTabbarSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainTabbarSB)
    }
    
    /// `UIStoryboard(name: "MapSB", bundle: ...)`
    static func mapSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mapSB)
    }
    
    /// `UIStoryboard(name: "MessageSB", bundle: ...)`
    static func messageSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.messageSB)
    }
    
    /// `UIStoryboard(name: "MyTrailsSB", bundle: ...)`
    static func myTrailsSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myTrailsSB)
    }
    
    /// `UIStoryboard(name: "OnlineStoreSB", bundle: ...)`
    static func onlineStoreSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onlineStoreSB)
    }
    
    /// `UIStoryboard(name: "ProfileSB", bundle: ...)`
    static func profileSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileSB)
    }
    
    /// `UIStoryboard(name: "RunWildSB", bundle: ...)`
    static func runWildSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.runWildSB)
    }
    
    /// `UIStoryboard(name: "SplashSB", bundle: ...)`
    static func splashSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splashSB)
    }
    
    /// `UIStoryboard(name: "SupportSB", bundle: ...)`
    static func supportSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.supportSB)
    }
    
    /// `UIStoryboard(name: "TryRouteSB", bundle: ...)`
    static func tryRouteSB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tryRouteSB)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 213 localization keys.
    struct localizable {
      /// Value: &
      static let and = Rswift.StringResource(key: "and", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: About Me
      static let aboutMe = Rswift.StringResource(key: "aboutMe", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: About Me text length should not be greater than 100 characters.
      static let aboutMeLenghtError = Rswift.StringResource(key: "aboutMeLenghtError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Address Line 1
      static let addressLineOne = Rswift.StringResource(key: "addressLineOne", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Address Line 2
      static let addressLineTwo = Rswift.StringResource(key: "addressLineTwo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Address line 1 is required
      static let addressLineOneRequired = Rswift.StringResource(key: "addressLineOneRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Address line 2 is required
      static let addressLineTwoRequired = Rswift.StringResource(key: "addressLineTwoRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Address line length should be less than 20 characters.
      static let addressLineLenghtError = Rswift.StringResource(key: "addressLineLenghtError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Alert
      static let alert = Rswift.StringResource(key: "alert", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Anonymous
      static let anonymous = Rswift.StringResource(key: "anonymous", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to go back?
      static let areYouSureYouWantToGoBackAlert = Rswift.StringResource(key: "areYouSureYouWantToGoBackAlert", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Attach images or proof
      static let attachImagesOrProof = Rswift.StringResource(key: "attachImagesOrProof", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Attachment size should not be greater than 5 MB.
      static let attachmentSizeError = Rswift.StringResource(key: "attachmentSizeError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Avg Speed
      static let avgSpeed = Rswift.StringResource(key: "avgSpeed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Back ID
      static let backID = Rswift.StringResource(key: "backID", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Back ID image is required.
      static let backIdImageError = Rswift.StringResource(key: "backIdImageError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Both password should be matched.
      static let bothPasswordMatchError = Rswift.StringResource(key: "bothPasswordMatchError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: By creating an account, you agree to our
      static let bySignupYouAgreeToOur = Rswift.StringResource(key: "bySignupYouAgreeToOur", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: By logging in, you agree to our
      static let byLoggingInYouAgreeToOur = Rswift.StringResource(key: "byLoggingInYouAgreeToOur", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let commonCancel = Rswift.StringResource(key: "common.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Comments
      static let comments = Rswift.StringResource(key: "comments", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Completed
      static let completed = Rswift.StringResource(key: "completed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm new password
      static let confirmNewPassword = Rswift.StringResource(key: "confirmNewPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm password is required.
      static let confirmPasswordRequired = Rswift.StringResource(key: "confirmPasswordRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm password should be minimum of 6 characters
      static let confirmPasswordLenghtError = Rswift.StringResource(key: "confirmPasswordLenghtError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Congratulations You are
      static let congratulationsYouAre = Rswift.StringResource(key: "congratulationsYouAre", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Congratulations! You Have Completed This Route.
      static let completeRouteMessage = Rswift.StringResource(key: "completeRouteMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Congratulations! You have found Treasure Wild.
      static let congratulationsYouHaveFoundTreasureHunt = Rswift.StringResource(key: "congratulationsYouHaveFoundTreasureHunt", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create new  password
      static let createNewPassword = Rswift.StringResource(key: "createNewPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Created Route
      static let createdRoute = Rswift.StringResource(key: "createdRoute", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: DID YOU KNOW?
      static let infoLblText = Rswift.StringResource(key: "infoLblText", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Date of Birth
      static let dob = Rswift.StringResource(key: "dob", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Default
      static let _default = Rswift.StringResource(key: "_default", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete Conversation
      static let deleteConversation = Rswift.StringResource(key: "deleteConversation", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Details
      static let details = Rswift.StringResource(key: "details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Didn’t recieve code?
      static let didNotRecieveCode = Rswift.StringResource(key: "didNotRecieveCode", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Distance
      static let distance = Rswift.StringResource(key: "distance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Do you have already account?
      static let doYouHaveAlreadyAccount = Rswift.StringResource(key: "doYouHaveAlreadyAccount? ", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Done
      static let done = Rswift.StringResource(key: "done", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Don’t have an account? 
      static let dontHaveAnAccount = Rswift.StringResource(key: "dontHaveAnAccount? ", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: E-Wavier
      static let eWavier = Rswift.StringResource(key: "eWavier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit Profile
      static let editProfile = Rswift.StringResource(key: "editProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Elapsed Time
      static let elapsedTime = Rswift.StringResource(key: "elapsedTime", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Elevation Gain
      static let elevationGain = Rswift.StringResource(key: "elevationGain", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email is required
      static let emailRequired = Rswift.StringResource(key: "emailRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: End Point
      static let endPoint = Rswift.StringResource(key: "endPoint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: End point is required.
      static let endPointRequired = Rswift.StringResource(key: "endPointRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter new password
      static let enterNewPassword = Rswift.StringResource(key: "enterNewPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your email ID  or phone number associated with your account and we’ll send an verification code for reset your password
      static let enterEmailOrPhoneAssociatedWithYourAccount = Rswift.StringResource(key: "enterEmailOrPhoneAssociatedWithYourAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error
      static let commonError = Rswift.StringResource(key: "common.error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: FAQ
      static let faq = Rswift.StringResource(key: "faq", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: FAQS
      static let faqs = Rswift.StringResource(key: "faqs", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: First name
      static let firstName = Rswift.StringResource(key: "firstName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: First name is required.
      static let firstNameRequired = Rswift.StringResource(key: "firstNameRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: First name length should be minimum 2 and maximum 15 characters.
      static let firstNameLenghtError = Rswift.StringResource(key: "firstNameLenghtError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Forgot password
      static let forgotPassword = Rswift.StringResource(key: "forgotPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Friend Request
      static let friendRequest = Rswift.StringResource(key: "friendRequest", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Front ID
      static let frontID = Rswift.StringResource(key: "frontID", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Front ID image is required.
      static let frontIdImageError = Rswift.StringResource(key: "frontIdImageError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Full name
      static let fullName = Rswift.StringResource(key: "fullName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Full name is required.
      static let fullNameRequired = Rswift.StringResource(key: "fullNameRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Full name length should be minimum 2 and maximum 30 characters.
      static let fullNameLenghtError = Rswift.StringResource(key: "fullNameLenghtError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Gender
      static let gender = Rswift.StringResource(key: "gender", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go Wild Admin
      static let goWildAdmin = Rswift.StringResource(key: "goWildAdmin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go Wild History
      static let goWildHistory = Rswift.StringResource(key: "goWildHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Go wild feed
      static let goWildFeed = Rswift.StringResource(key: "goWildFeed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: GoWild need to access your camera to perform this action.
      static let cameraPermissionError = Rswift.StringResource(key: "cameraPermissionError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: GoWild need to access your gallery to perform this action.
      static let libraryPermissionError = Rswift.StringResource(key: "libraryPermissionError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Good Afternoon
      static let goodAfternoon = Rswift.StringResource(key: "goodAfternoon", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Good Evening
      static let goodEvening = Rswift.StringResource(key: "goodEvening", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Good Morning
      static let goodMorning = Rswift.StringResource(key: "goodMorning", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hello
      static let hello = Rswift.StringResource(key: "hello", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: How can we help you
      static let howCanWeHelpYou = Rswift.StringResource(key: "howCanWeHelpYou", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: I Agree
      static let iAgree = Rswift.StringResource(key: "iAgree", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: I agree with local laws and taxes terms
      static let iAgreeWithLocalLawsAndTaxesTerms = Rswift.StringResource(key: "iAgreeWithLocalLawsAndTaxesTerms", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ID images are required.
      static let idImagesError = Rswift.StringResource(key: "idImagesError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Image size should not be greater than 5 MB.
      static let imageSizeError = Rswift.StringResource(key: "imageSizeError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Information from your registration
      static let informationFromYourRegistration = Rswift.StringResource(key: "informationFromYourRegistration", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: LOGIN
      static let loginTitle = Rswift.StringResource(key: "loginTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Last name
      static let lastName = Rswift.StringResource(key: "lastName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Last name is required.
      static let lastNameRequired = Rswift.StringResource(key: "lastNameRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Last name length should be minimum 2 and maximum 15 characters.
      static let lastNameLenghtError = Rswift.StringResource(key: "lastNameLenghtError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Leaderboard
      static let leaderboard = Rswift.StringResource(key: "leaderboard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Left
      static let left = Rswift.StringResource(key: "left", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Likes
      static let likes = Rswift.StringResource(key: "likes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Loading
      static let loading = Rswift.StringResource(key: "loading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Log in with Facebook
      static let logInWithFacebook = Rswift.StringResource(key: "logInWithFacebook", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Log in with Google
      static let logInWithGoogle = Rswift.StringResource(key: "logInWithGoogle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Login
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Logout
      static let logout = Rswift.StringResource(key: "logout", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Make sure you are in a well-lit room and hold the phone as shown in the picture
      static let makeSureYouAreInAWellLitRoomDescription = Rswift.StringResource(key: "makeSureYouAreInAWellLitRoomDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Map
      static let map = Rswift.StringResource(key: "map", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Map Overlay
      static let mapOverlay = Rswift.StringResource(key: "mapOverlay", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Map Wild
      static let runWild = Rswift.StringResource(key: "runWild", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Map Wild
      static let runWildTitle = Rswift.StringResource(key: "runWildTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Max Elevation
      static let maxElevation = Rswift.StringResource(key: "maxElevation", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Message is required
      static let messageIsRequired = Rswift.StringResource(key: "messageIsRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Messages
      static let messages = Rswift.StringResource(key: "messages", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Miles
      static let miles = Rswift.StringResource(key: "miles", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Moving Time
      static let movingTime = Rswift.StringResource(key: "movingTime", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Achievements
      static let myAchievements = Rswift.StringResource(key: "myAchievements", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Feed
      static let myFeed = Rswift.StringResource(key: "myFeed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Friends
      static let myFriends = Rswift.StringResource(key: "myFriends", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Races
      static let myRaces = Rswift.StringResource(key: "myRaces", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Trails
      static let myTrails = Rswift.StringResource(key: "myTrails", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Trails
      static let myTrailsTitle = Rswift.StringResource(key: "myTrailsTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Nearby Adventures
      static let nearbyAdventures = Rswift.StringResource(key: "nearbyAdventures", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: New Route
      static let newRoute = Rswift.StringResource(key: "newRoute", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: New password is required.
      static let newPasswordRequired = Rswift.StringResource(key: "newPasswordRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: New password should be minimum of 6 characters
      static let newPasswordLenghtError = Rswift.StringResource(key: "newPasswordLenghtError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Not Registered
      static let notRegistered = Rswift.StringResource(key: "notRegistered", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Notifications
      static let notifications = Rswift.StringResource(key: "notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OR
      static let or = Rswift.StringResource(key: "or", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OTP is required
      static let otpRequired = Rswift.StringResource(key: "otpRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ok
      static let commonOk = Rswift.StringResource(key: "common.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: On Going
      static let onGoing = Rswift.StringResource(key: "onGoing", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: On hold
      static let onHold = Rswift.StringResource(key: "onHold", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Oops! Network is not available.
      static let oopsNetworkError = Rswift.StringResource(key: "oopsNetworkError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Oops! something went wrong. Please try again later.
      static let oopsSomethingWentWrong = Rswift.StringResource(key: "oopsSomethingWentWrong", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Outdoors
      static let outdoors = Rswift.StringResource(key: "outdoors", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password is required
      static let passwordRequired = Rswift.StringResource(key: "passwordRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password reset successfully.
      static let passwordResetSuccessMessage = Rswift.StringResource(key: "passwordResetSuccessMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password should be minimum of 6 characters
      static let passwordLenghtError = Rswift.StringResource(key: "passwordLenghtError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Payment
      static let payment = Rswift.StringResource(key: "payment", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pending
      static let pending = Rswift.StringResource(key: "pending", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Phone number
      static let phoneNumber = Rswift.StringResource(key: "phoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Phone number is invalid.
      static let phoneNmbIsInvalid = Rswift.StringResource(key: "phoneNmbIsInvalid", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter complete OTP.
      static let otpLengthError = Rswift.StringResource(key: "otpLengthError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter post description.
      static let createPostDescriptionError = Rswift.StringResource(key: "createPostDescriptionError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter valid email
      static let enterValidEmail = Rswift.StringResource(key: "enterValidEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please select EWaiver term and conditions.
      static let selectEWaiverTermAndConditionError = Rswift.StringResource(key: "selectEWaiverTermAndConditionError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please type comment.
      static let commentEmptyError = Rswift.StringResource(key: "commentEmptyError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Post
      static let post = Rswift.StringResource(key: "post", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Prepare for the  adventure of a  lifetime!
      static let prepareForTheAdventureOfALifetime = Rswift.StringResource(key: "prepareForTheAdventureOfALifetime", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Prepare to scan your face
      static let prepareToScanYourFace = Rswift.StringResource(key: "prepareToScanYourFace", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Privacy Policy
      static let privacyPolicy = Rswift.StringResource(key: "privacyPolicy", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Profile
      static let profile = Rswift.StringResource(key: "profile", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Register
      static let register = Rswift.StringResource(key: "register", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Registered
      static let registered = Rswift.StringResource(key: "registered", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Registration
      static let registration = Rswift.StringResource(key: "registration", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Registration Number
      static let registrationNumber = Rswift.StringResource(key: "registrationNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Resend OTP
      static let resendOTP = Rswift.StringResource(key: "resendOTP", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Resend Registration Number
      static let resendRegistrationNumber = Rswift.StringResource(key: "resendRegistrationNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reset  password
      static let resetPassword = Rswift.StringResource(key: "resetPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reset Password
      static let reset_Password = Rswift.StringResource(key: "reset_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Retry
      static let retry = Rswift.StringResource(key: "retry", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Road Map
      static let roadMap = Rswift.StringResource(key: "roadMap", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Route Name
      static let routeName = Rswift.StringResource(key: "routeName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Route is not yet approved by Admin
      static let routeIsNotApprovedByAdminError = Rswift.StringResource(key: "routeIsNotApprovedByAdminError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Route name is required.
      static let routeNameRequired = Rswift.StringResource(key: "routeNameRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Route path is invalid.
      static let invalidRoutePath = Rswift.StringResource(key: "invalidRoutePath", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Routes
      static let routes = Rswift.StringResource(key: "routes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Satelite
      static let satelite = Rswift.StringResource(key: "satelite", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Satellite
      static let satellite = Rswift.StringResource(key: "satellite", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save
      static let save = Rswift.StringResource(key: "save", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save Routes
      static let saveRoutes = Rswift.StringResource(key: "saveRoutes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: See all
      static let seeAll = Rswift.StringResource(key: "seeAll", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Selfie Verification
      static let selfieVerification = Rswift.StringResource(key: "selfieVerification", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send Message
      static let sendMessage = Rswift.StringResource(key: "sendMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send New Ticket
      static let sendNewTicket = Rswift.StringResource(key: "sendNewTicket", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Set as default
      static let setAsDefault = Rswift.StringResource(key: "setAsDefault", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show My Results
      static let showMyResults = Rswift.StringResource(key: "showMyResults", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign Up
      static let signUp = Rswift.StringResource(key: "signUp", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Start
      static let start = Rswift.StringResource(key: "start", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Start Route
      static let startRoute = Rswift.StringResource(key: "startRoute", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Starting Point
      static let startingPoint = Rswift.StringResource(key: "startingPoint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Starting point is required.
      static let startingPointRequired = Rswift.StringResource(key: "startingPointRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Streets
      static let streets = Rswift.StringResource(key: "streets", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Subject
      static let subject = Rswift.StringResource(key: "subject", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Subject is required
      static let subjectIsRequired = Rswift.StringResource(key: "subjectIsRequired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Submit
      static let submit = Rswift.StringResource(key: "submit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Subscriptions
      static let subscriptions = Rswift.StringResource(key: "subscriptions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Success
      static let success = Rswift.StringResource(key: "success", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Suggested Friend
      static let suggestedFriend = Rswift.StringResource(key: "suggestedFriend", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Suggested Routes
      static let suggestedRoutes = Rswift.StringResource(key: "suggestedRoutes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Support
      static let support = Rswift.StringResource(key: "support", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Terms & Conditions
      static let termsAndConditions = Rswift.StringResource(key: "termsAndConditions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Terrain
      static let terrain = Rswift.StringResource(key: "terrain", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: To
      static let to = Rswift.StringResource(key: "to", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Treasure Wild
      static let treasureMap = Rswift.StringResource(key: "treasureMap", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Treasure Wild
      static let treasureMapTitle = Rswift.StringResource(key: "treasureMapTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Try Route
      static let tryRoute = Rswift.StringResource(key: "tryRoute", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Type here
      static let typeHere = Rswift.StringResource(key: "typeHere", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: UnSave
      static let unsave = Rswift.StringResource(key: "unsave", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Upcoming
      static let upcoming = Rswift.StringResource(key: "upcoming", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: User name length should be minimum 2 and maximum 15 characters.
      static let userNameLenghtError = Rswift.StringResource(key: "userNameLenghtError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Username
      static let userName = Rswift.StringResource(key: "userName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Verification code sent to 
      static let verificationCodeSentTo = Rswift.StringResource(key: "verificationCodeSentTo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Verify account
      static let verifyAccount = Rswift.StringResource(key: "verifyAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Verify code
      static let verifyCode = Rswift.StringResource(key: "verifyCode", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Verify phone
      static let verifyPhone = Rswift.StringResource(key: "verifyPhone", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Video Title
      static let historicalPointTitle = Rswift.StringResource(key: "historicalPointTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Waiting for approval
      static let waitingForApproval = Rswift.StringResource(key: "waitingForApproval", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What would you like to tell us?
      static let whatWouldYouLikeToTellUs = Rswift.StringResource(key: "whatWouldYouLikeToTellUs", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Write subject here...
      static let writeSubjectHerePlaceholder = Rswift.StringResource(key: "writeSubjectHerePlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You are almost there!
      static let youAreAlmostThere = Rswift.StringResource(key: "youAreAlmostThere", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You are not in the proximity of the starting point of this route.
      static let cannotStartNavigationError = Rswift.StringResource(key: "cannotStartNavigationError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can't start this route because its invalid.
      static let routePathIsInvalid = Rswift.StringResource(key: "routePathIsInvalid", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have already try this route.
      static let alreadyTryThisRouteError = Rswift.StringResource(key: "alreadyTryThisRouteError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have cancelled facebook login.
      static let fbLoginCancelError = Rswift.StringResource(key: "fbLoginCancelError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have cancelled google login.
      static let googleLoginCancelError = Rswift.StringResource(key: "googleLoginCancelError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have cancelled image picking
      static let postImagePickCancelError = Rswift.StringResource(key: "postImagePickCancelError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have not enable your location. To proceed this please enable your location.
      static let locationEnabledError = Rswift.StringResource(key: "locationEnabledError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have successfully completed your signup. Please login from same user.
      static let signupCompleteMessage = Rswift.StringResource(key: "signupCompleteMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your Activity For Today
      static let newPostTextViewPlaceholder = Rswift.StringResource(key: "newPostTextViewPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your Message
      static let yourMessage = Rswift.StringResource(key: "yourMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your password must be different from previous used password.
      static let yourPasswordMustBeDifferentFromPreviousUsedPassword = Rswift.StringResource(key: "yourPasswordMustBeDifferentFromPreviousUsedPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your selfie is already verified.
      static let yourSelfieAlreadyVerified = Rswift.StringResource(key: "yourSelfieAlreadyVerified", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: m
      static let meter = Rswift.StringResource(key: "meter", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: place on this route
      static let placeOnThisRoute = Rswift.StringResource(key: "placeOnThisRoute", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: &
      static func and(_: Void = ()) -> String {
        return NSLocalizedString("and", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: About Me
      static func aboutMe(_: Void = ()) -> String {
        return NSLocalizedString("aboutMe", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: About Me text length should not be greater than 100 characters.
      static func aboutMeLenghtError(_: Void = ()) -> String {
        return NSLocalizedString("aboutMeLenghtError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Address Line 1
      static func addressLineOne(_: Void = ()) -> String {
        return NSLocalizedString("addressLineOne", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Address Line 2
      static func addressLineTwo(_: Void = ()) -> String {
        return NSLocalizedString("addressLineTwo", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Address line 1 is required
      static func addressLineOneRequired(_: Void = ()) -> String {
        return NSLocalizedString("addressLineOneRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Address line 2 is required
      static func addressLineTwoRequired(_: Void = ()) -> String {
        return NSLocalizedString("addressLineTwoRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Address line length should be less than 20 characters.
      static func addressLineLenghtError(_: Void = ()) -> String {
        return NSLocalizedString("addressLineLenghtError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Alert
      static func alert(_: Void = ()) -> String {
        return NSLocalizedString("alert", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Anonymous
      static func anonymous(_: Void = ()) -> String {
        return NSLocalizedString("anonymous", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure you want to go back?
      static func areYouSureYouWantToGoBackAlert(_: Void = ()) -> String {
        return NSLocalizedString("areYouSureYouWantToGoBackAlert", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Attach images or proof
      static func attachImagesOrProof(_: Void = ()) -> String {
        return NSLocalizedString("attachImagesOrProof", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Attachment size should not be greater than 5 MB.
      static func attachmentSizeError(_: Void = ()) -> String {
        return NSLocalizedString("attachmentSizeError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Avg Speed
      static func avgSpeed(_: Void = ()) -> String {
        return NSLocalizedString("avgSpeed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Back ID
      static func backID(_: Void = ()) -> String {
        return NSLocalizedString("backID", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Back ID image is required.
      static func backIdImageError(_: Void = ()) -> String {
        return NSLocalizedString("backIdImageError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Both password should be matched.
      static func bothPasswordMatchError(_: Void = ()) -> String {
        return NSLocalizedString("bothPasswordMatchError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: By creating an account, you agree to our
      static func bySignupYouAgreeToOur(_: Void = ()) -> String {
        return NSLocalizedString("bySignupYouAgreeToOur", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: By logging in, you agree to our
      static func byLoggingInYouAgreeToOur(_: Void = ()) -> String {
        return NSLocalizedString("byLoggingInYouAgreeToOur", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func commonCancel(_: Void = ()) -> String {
        return NSLocalizedString("common.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Comments
      static func comments(_: Void = ()) -> String {
        return NSLocalizedString("comments", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Completed
      static func completed(_: Void = ()) -> String {
        return NSLocalizedString("completed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Confirm new password
      static func confirmNewPassword(_: Void = ()) -> String {
        return NSLocalizedString("confirmNewPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Confirm password is required.
      static func confirmPasswordRequired(_: Void = ()) -> String {
        return NSLocalizedString("confirmPasswordRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Confirm password should be minimum of 6 characters
      static func confirmPasswordLenghtError(_: Void = ()) -> String {
        return NSLocalizedString("confirmPasswordLenghtError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Congratulations You are
      static func congratulationsYouAre(_: Void = ()) -> String {
        return NSLocalizedString("congratulationsYouAre", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Congratulations! You Have Completed This Route.
      static func completeRouteMessage(_: Void = ()) -> String {
        return NSLocalizedString("completeRouteMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Congratulations! You have found Treasure Wild.
      static func congratulationsYouHaveFoundTreasureHunt(_: Void = ()) -> String {
        return NSLocalizedString("congratulationsYouHaveFoundTreasureHunt", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Create new  password
      static func createNewPassword(_: Void = ()) -> String {
        return NSLocalizedString("createNewPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Created Route
      static func createdRoute(_: Void = ()) -> String {
        return NSLocalizedString("createdRoute", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: DID YOU KNOW?
      static func infoLblText(_: Void = ()) -> String {
        return NSLocalizedString("infoLblText", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Date of Birth
      static func dob(_: Void = ()) -> String {
        return NSLocalizedString("dob", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Default
      static func _default(_: Void = ()) -> String {
        return NSLocalizedString("_default", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Delete Conversation
      static func deleteConversation(_: Void = ()) -> String {
        return NSLocalizedString("deleteConversation", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Details
      static func details(_: Void = ()) -> String {
        return NSLocalizedString("details", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Didn’t recieve code?
      static func didNotRecieveCode(_: Void = ()) -> String {
        return NSLocalizedString("didNotRecieveCode", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Distance
      static func distance(_: Void = ()) -> String {
        return NSLocalizedString("distance", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Do you have already account?
      static func doYouHaveAlreadyAccount(_: Void = ()) -> String {
        return NSLocalizedString("doYouHaveAlreadyAccount? ", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Done
      static func done(_: Void = ()) -> String {
        return NSLocalizedString("done", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Don’t have an account? 
      static func dontHaveAnAccount(_: Void = ()) -> String {
        return NSLocalizedString("dontHaveAnAccount? ", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: E-Wavier
      static func eWavier(_: Void = ()) -> String {
        return NSLocalizedString("eWavier", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Edit Profile
      static func editProfile(_: Void = ()) -> String {
        return NSLocalizedString("editProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Elapsed Time
      static func elapsedTime(_: Void = ()) -> String {
        return NSLocalizedString("elapsedTime", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Elevation Gain
      static func elevationGain(_: Void = ()) -> String {
        return NSLocalizedString("elevationGain", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email
      static func email(_: Void = ()) -> String {
        return NSLocalizedString("email", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email is required
      static func emailRequired(_: Void = ()) -> String {
        return NSLocalizedString("emailRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: End Point
      static func endPoint(_: Void = ()) -> String {
        return NSLocalizedString("endPoint", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: End point is required.
      static func endPointRequired(_: Void = ()) -> String {
        return NSLocalizedString("endPointRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter new password
      static func enterNewPassword(_: Void = ()) -> String {
        return NSLocalizedString("enterNewPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter your email ID  or phone number associated with your account and we’ll send an verification code for reset your password
      static func enterEmailOrPhoneAssociatedWithYourAccount(_: Void = ()) -> String {
        return NSLocalizedString("enterEmailOrPhoneAssociatedWithYourAccount", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Error
      static func commonError(_: Void = ()) -> String {
        return NSLocalizedString("common.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: FAQ
      static func faq(_: Void = ()) -> String {
        return NSLocalizedString("faq", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: FAQS
      static func faqs(_: Void = ()) -> String {
        return NSLocalizedString("faqs", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: First name
      static func firstName(_: Void = ()) -> String {
        return NSLocalizedString("firstName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: First name is required.
      static func firstNameRequired(_: Void = ()) -> String {
        return NSLocalizedString("firstNameRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: First name length should be minimum 2 and maximum 15 characters.
      static func firstNameLenghtError(_: Void = ()) -> String {
        return NSLocalizedString("firstNameLenghtError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Forgot password
      static func forgotPassword(_: Void = ()) -> String {
        return NSLocalizedString("forgotPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Friend Request
      static func friendRequest(_: Void = ()) -> String {
        return NSLocalizedString("friendRequest", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Front ID
      static func frontID(_: Void = ()) -> String {
        return NSLocalizedString("frontID", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Front ID image is required.
      static func frontIdImageError(_: Void = ()) -> String {
        return NSLocalizedString("frontIdImageError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Full name
      static func fullName(_: Void = ()) -> String {
        return NSLocalizedString("fullName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Full name is required.
      static func fullNameRequired(_: Void = ()) -> String {
        return NSLocalizedString("fullNameRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Full name length should be minimum 2 and maximum 30 characters.
      static func fullNameLenghtError(_: Void = ()) -> String {
        return NSLocalizedString("fullNameLenghtError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Gender
      static func gender(_: Void = ()) -> String {
        return NSLocalizedString("gender", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Go Wild Admin
      static func goWildAdmin(_: Void = ()) -> String {
        return NSLocalizedString("goWildAdmin", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Go Wild History
      static func goWildHistory(_: Void = ()) -> String {
        return NSLocalizedString("goWildHistory", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Go wild feed
      static func goWildFeed(_: Void = ()) -> String {
        return NSLocalizedString("goWildFeed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: GoWild need to access your camera to perform this action.
      static func cameraPermissionError(_: Void = ()) -> String {
        return NSLocalizedString("cameraPermissionError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: GoWild need to access your gallery to perform this action.
      static func libraryPermissionError(_: Void = ()) -> String {
        return NSLocalizedString("libraryPermissionError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Good Afternoon
      static func goodAfternoon(_: Void = ()) -> String {
        return NSLocalizedString("goodAfternoon", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Good Evening
      static func goodEvening(_: Void = ()) -> String {
        return NSLocalizedString("goodEvening", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Good Morning
      static func goodMorning(_: Void = ()) -> String {
        return NSLocalizedString("goodMorning", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Hello
      static func hello(_: Void = ()) -> String {
        return NSLocalizedString("hello", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: How can we help you
      static func howCanWeHelpYou(_: Void = ()) -> String {
        return NSLocalizedString("howCanWeHelpYou", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: I Agree
      static func iAgree(_: Void = ()) -> String {
        return NSLocalizedString("iAgree", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: I agree with local laws and taxes terms
      static func iAgreeWithLocalLawsAndTaxesTerms(_: Void = ()) -> String {
        return NSLocalizedString("iAgreeWithLocalLawsAndTaxesTerms", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ID images are required.
      static func idImagesError(_: Void = ()) -> String {
        return NSLocalizedString("idImagesError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Image size should not be greater than 5 MB.
      static func imageSizeError(_: Void = ()) -> String {
        return NSLocalizedString("imageSizeError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Information from your registration
      static func informationFromYourRegistration(_: Void = ()) -> String {
        return NSLocalizedString("informationFromYourRegistration", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: LOGIN
      static func loginTitle(_: Void = ()) -> String {
        return NSLocalizedString("loginTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Last name
      static func lastName(_: Void = ()) -> String {
        return NSLocalizedString("lastName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Last name is required.
      static func lastNameRequired(_: Void = ()) -> String {
        return NSLocalizedString("lastNameRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Last name length should be minimum 2 and maximum 15 characters.
      static func lastNameLenghtError(_: Void = ()) -> String {
        return NSLocalizedString("lastNameLenghtError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Leaderboard
      static func leaderboard(_: Void = ()) -> String {
        return NSLocalizedString("leaderboard", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Left
      static func left(_: Void = ()) -> String {
        return NSLocalizedString("left", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Likes
      static func likes(_: Void = ()) -> String {
        return NSLocalizedString("likes", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Loading
      static func loading(_: Void = ()) -> String {
        return NSLocalizedString("loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Log in with Facebook
      static func logInWithFacebook(_: Void = ()) -> String {
        return NSLocalizedString("logInWithFacebook", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Log in with Google
      static func logInWithGoogle(_: Void = ()) -> String {
        return NSLocalizedString("logInWithGoogle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Login
      static func login(_: Void = ()) -> String {
        return NSLocalizedString("login", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Logout
      static func logout(_: Void = ()) -> String {
        return NSLocalizedString("logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Make sure you are in a well-lit room and hold the phone as shown in the picture
      static func makeSureYouAreInAWellLitRoomDescription(_: Void = ()) -> String {
        return NSLocalizedString("makeSureYouAreInAWellLitRoomDescription", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Map
      static func map(_: Void = ()) -> String {
        return NSLocalizedString("map", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Map Overlay
      static func mapOverlay(_: Void = ()) -> String {
        return NSLocalizedString("mapOverlay", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Map Wild
      static func runWild(_: Void = ()) -> String {
        return NSLocalizedString("runWild", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Map Wild
      static func runWildTitle(_: Void = ()) -> String {
        return NSLocalizedString("runWildTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Max Elevation
      static func maxElevation(_: Void = ()) -> String {
        return NSLocalizedString("maxElevation", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Message is required
      static func messageIsRequired(_: Void = ()) -> String {
        return NSLocalizedString("messageIsRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Messages
      static func messages(_: Void = ()) -> String {
        return NSLocalizedString("messages", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Miles
      static func miles(_: Void = ()) -> String {
        return NSLocalizedString("miles", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Moving Time
      static func movingTime(_: Void = ()) -> String {
        return NSLocalizedString("movingTime", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: My Achievements
      static func myAchievements(_: Void = ()) -> String {
        return NSLocalizedString("myAchievements", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: My Feed
      static func myFeed(_: Void = ()) -> String {
        return NSLocalizedString("myFeed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: My Friends
      static func myFriends(_: Void = ()) -> String {
        return NSLocalizedString("myFriends", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: My Races
      static func myRaces(_: Void = ()) -> String {
        return NSLocalizedString("myRaces", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: My Trails
      static func myTrails(_: Void = ()) -> String {
        return NSLocalizedString("myTrails", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: My Trails
      static func myTrailsTitle(_: Void = ()) -> String {
        return NSLocalizedString("myTrailsTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Nearby Adventures
      static func nearbyAdventures(_: Void = ()) -> String {
        return NSLocalizedString("nearbyAdventures", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: New Route
      static func newRoute(_: Void = ()) -> String {
        return NSLocalizedString("newRoute", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: New password is required.
      static func newPasswordRequired(_: Void = ()) -> String {
        return NSLocalizedString("newPasswordRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: New password should be minimum of 6 characters
      static func newPasswordLenghtError(_: Void = ()) -> String {
        return NSLocalizedString("newPasswordLenghtError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Not Registered
      static func notRegistered(_: Void = ()) -> String {
        return NSLocalizedString("notRegistered", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Notifications
      static func notifications(_: Void = ()) -> String {
        return NSLocalizedString("notifications", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OR
      static func or(_: Void = ()) -> String {
        return NSLocalizedString("or", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OTP is required
      static func otpRequired(_: Void = ()) -> String {
        return NSLocalizedString("otpRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ok
      static func commonOk(_: Void = ()) -> String {
        return NSLocalizedString("common.ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: On Going
      static func onGoing(_: Void = ()) -> String {
        return NSLocalizedString("onGoing", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: On hold
      static func onHold(_: Void = ()) -> String {
        return NSLocalizedString("onHold", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Oops! Network is not available.
      static func oopsNetworkError(_: Void = ()) -> String {
        return NSLocalizedString("oopsNetworkError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Oops! something went wrong. Please try again later.
      static func oopsSomethingWentWrong(_: Void = ()) -> String {
        return NSLocalizedString("oopsSomethingWentWrong", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Outdoors
      static func outdoors(_: Void = ()) -> String {
        return NSLocalizedString("outdoors", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("password", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password is required
      static func passwordRequired(_: Void = ()) -> String {
        return NSLocalizedString("passwordRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password reset successfully.
      static func passwordResetSuccessMessage(_: Void = ()) -> String {
        return NSLocalizedString("passwordResetSuccessMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password should be minimum of 6 characters
      static func passwordLenghtError(_: Void = ()) -> String {
        return NSLocalizedString("passwordLenghtError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Payment
      static func payment(_: Void = ()) -> String {
        return NSLocalizedString("payment", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Pending
      static func pending(_: Void = ()) -> String {
        return NSLocalizedString("pending", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Phone number
      static func phoneNumber(_: Void = ()) -> String {
        return NSLocalizedString("phoneNumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Phone number is invalid.
      static func phoneNmbIsInvalid(_: Void = ()) -> String {
        return NSLocalizedString("phoneNmbIsInvalid", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter complete OTP.
      static func otpLengthError(_: Void = ()) -> String {
        return NSLocalizedString("otpLengthError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter post description.
      static func createPostDescriptionError(_: Void = ()) -> String {
        return NSLocalizedString("createPostDescriptionError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter valid email
      static func enterValidEmail(_: Void = ()) -> String {
        return NSLocalizedString("enterValidEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please select EWaiver term and conditions.
      static func selectEWaiverTermAndConditionError(_: Void = ()) -> String {
        return NSLocalizedString("selectEWaiverTermAndConditionError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please type comment.
      static func commentEmptyError(_: Void = ()) -> String {
        return NSLocalizedString("commentEmptyError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Post
      static func post(_: Void = ()) -> String {
        return NSLocalizedString("post", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Prepare for the  adventure of a  lifetime!
      static func prepareForTheAdventureOfALifetime(_: Void = ()) -> String {
        return NSLocalizedString("prepareForTheAdventureOfALifetime", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Prepare to scan your face
      static func prepareToScanYourFace(_: Void = ()) -> String {
        return NSLocalizedString("prepareToScanYourFace", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Privacy Policy
      static func privacyPolicy(_: Void = ()) -> String {
        return NSLocalizedString("privacyPolicy", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Profile
      static func profile(_: Void = ()) -> String {
        return NSLocalizedString("profile", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Register
      static func register(_: Void = ()) -> String {
        return NSLocalizedString("register", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Registered
      static func registered(_: Void = ()) -> String {
        return NSLocalizedString("registered", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Registration
      static func registration(_: Void = ()) -> String {
        return NSLocalizedString("registration", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Registration Number
      static func registrationNumber(_: Void = ()) -> String {
        return NSLocalizedString("registrationNumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Resend OTP
      static func resendOTP(_: Void = ()) -> String {
        return NSLocalizedString("resendOTP", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Resend Registration Number
      static func resendRegistrationNumber(_: Void = ()) -> String {
        return NSLocalizedString("resendRegistrationNumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Reset  password
      static func resetPassword(_: Void = ()) -> String {
        return NSLocalizedString("resetPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Reset Password
      static func reset_Password(_: Void = ()) -> String {
        return NSLocalizedString("reset_Password", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Retry
      static func retry(_: Void = ()) -> String {
        return NSLocalizedString("retry", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Road Map
      static func roadMap(_: Void = ()) -> String {
        return NSLocalizedString("roadMap", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Route Name
      static func routeName(_: Void = ()) -> String {
        return NSLocalizedString("routeName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Route is not yet approved by Admin
      static func routeIsNotApprovedByAdminError(_: Void = ()) -> String {
        return NSLocalizedString("routeIsNotApprovedByAdminError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Route name is required.
      static func routeNameRequired(_: Void = ()) -> String {
        return NSLocalizedString("routeNameRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Route path is invalid.
      static func invalidRoutePath(_: Void = ()) -> String {
        return NSLocalizedString("invalidRoutePath", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Routes
      static func routes(_: Void = ()) -> String {
        return NSLocalizedString("routes", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Satelite
      static func satelite(_: Void = ()) -> String {
        return NSLocalizedString("satelite", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Satellite
      static func satellite(_: Void = ()) -> String {
        return NSLocalizedString("satellite", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Save
      static func save(_: Void = ()) -> String {
        return NSLocalizedString("save", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Save Routes
      static func saveRoutes(_: Void = ()) -> String {
        return NSLocalizedString("saveRoutes", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: See all
      static func seeAll(_: Void = ()) -> String {
        return NSLocalizedString("seeAll", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Selfie Verification
      static func selfieVerification(_: Void = ()) -> String {
        return NSLocalizedString("selfieVerification", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Send Message
      static func sendMessage(_: Void = ()) -> String {
        return NSLocalizedString("sendMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Send New Ticket
      static func sendNewTicket(_: Void = ()) -> String {
        return NSLocalizedString("sendNewTicket", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Set as default
      static func setAsDefault(_: Void = ()) -> String {
        return NSLocalizedString("setAsDefault", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Settings
      static func settings(_: Void = ()) -> String {
        return NSLocalizedString("settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Show My Results
      static func showMyResults(_: Void = ()) -> String {
        return NSLocalizedString("showMyResults", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Sign Up
      static func signUp(_: Void = ()) -> String {
        return NSLocalizedString("signUp", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Start
      static func start(_: Void = ()) -> String {
        return NSLocalizedString("start", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Start Route
      static func startRoute(_: Void = ()) -> String {
        return NSLocalizedString("startRoute", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Starting Point
      static func startingPoint(_: Void = ()) -> String {
        return NSLocalizedString("startingPoint", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Starting point is required.
      static func startingPointRequired(_: Void = ()) -> String {
        return NSLocalizedString("startingPointRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Streets
      static func streets(_: Void = ()) -> String {
        return NSLocalizedString("streets", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Subject
      static func subject(_: Void = ()) -> String {
        return NSLocalizedString("subject", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Subject is required
      static func subjectIsRequired(_: Void = ()) -> String {
        return NSLocalizedString("subjectIsRequired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Submit
      static func submit(_: Void = ()) -> String {
        return NSLocalizedString("submit", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Subscriptions
      static func subscriptions(_: Void = ()) -> String {
        return NSLocalizedString("subscriptions", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Success
      static func success(_: Void = ()) -> String {
        return NSLocalizedString("success", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Suggested Friend
      static func suggestedFriend(_: Void = ()) -> String {
        return NSLocalizedString("suggestedFriend", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Suggested Routes
      static func suggestedRoutes(_: Void = ()) -> String {
        return NSLocalizedString("suggestedRoutes", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Support
      static func support(_: Void = ()) -> String {
        return NSLocalizedString("support", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Terms & Conditions
      static func termsAndConditions(_: Void = ()) -> String {
        return NSLocalizedString("termsAndConditions", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Terrain
      static func terrain(_: Void = ()) -> String {
        return NSLocalizedString("terrain", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: To
      static func to(_: Void = ()) -> String {
        return NSLocalizedString("to", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Treasure Wild
      static func treasureMap(_: Void = ()) -> String {
        return NSLocalizedString("treasureMap", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Treasure Wild
      static func treasureMapTitle(_: Void = ()) -> String {
        return NSLocalizedString("treasureMapTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Try Route
      static func tryRoute(_: Void = ()) -> String {
        return NSLocalizedString("tryRoute", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Type here
      static func typeHere(_: Void = ()) -> String {
        return NSLocalizedString("typeHere", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: UnSave
      static func unsave(_: Void = ()) -> String {
        return NSLocalizedString("unsave", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Upcoming
      static func upcoming(_: Void = ()) -> String {
        return NSLocalizedString("upcoming", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: User name length should be minimum 2 and maximum 15 characters.
      static func userNameLenghtError(_: Void = ()) -> String {
        return NSLocalizedString("userNameLenghtError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Username
      static func userName(_: Void = ()) -> String {
        return NSLocalizedString("userName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Verification code sent to 
      static func verificationCodeSentTo(_: Void = ()) -> String {
        return NSLocalizedString("verificationCodeSentTo", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Verify account
      static func verifyAccount(_: Void = ()) -> String {
        return NSLocalizedString("verifyAccount", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Verify code
      static func verifyCode(_: Void = ()) -> String {
        return NSLocalizedString("verifyCode", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Verify phone
      static func verifyPhone(_: Void = ()) -> String {
        return NSLocalizedString("verifyPhone", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Video Title
      static func historicalPointTitle(_: Void = ()) -> String {
        return NSLocalizedString("historicalPointTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Waiting for approval
      static func waitingForApproval(_: Void = ()) -> String {
        return NSLocalizedString("waitingForApproval", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: What would you like to tell us?
      static func whatWouldYouLikeToTellUs(_: Void = ()) -> String {
        return NSLocalizedString("whatWouldYouLikeToTellUs", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Write subject here...
      static func writeSubjectHerePlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("writeSubjectHerePlaceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You are almost there!
      static func youAreAlmostThere(_: Void = ()) -> String {
        return NSLocalizedString("youAreAlmostThere", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You are not in the proximity of the starting point of this route.
      static func cannotStartNavigationError(_: Void = ()) -> String {
        return NSLocalizedString("cannotStartNavigationError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You can't start this route because its invalid.
      static func routePathIsInvalid(_: Void = ()) -> String {
        return NSLocalizedString("routePathIsInvalid", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have already try this route.
      static func alreadyTryThisRouteError(_: Void = ()) -> String {
        return NSLocalizedString("alreadyTryThisRouteError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have cancelled facebook login.
      static func fbLoginCancelError(_: Void = ()) -> String {
        return NSLocalizedString("fbLoginCancelError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have cancelled google login.
      static func googleLoginCancelError(_: Void = ()) -> String {
        return NSLocalizedString("googleLoginCancelError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have cancelled image picking
      static func postImagePickCancelError(_: Void = ()) -> String {
        return NSLocalizedString("postImagePickCancelError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have not enable your location. To proceed this please enable your location.
      static func locationEnabledError(_: Void = ()) -> String {
        return NSLocalizedString("locationEnabledError", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have successfully completed your signup. Please login from same user.
      static func signupCompleteMessage(_: Void = ()) -> String {
        return NSLocalizedString("signupCompleteMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your Activity For Today
      static func newPostTextViewPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("newPostTextViewPlaceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your Message
      static func yourMessage(_: Void = ()) -> String {
        return NSLocalizedString("yourMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your password must be different from previous used password.
      static func yourPasswordMustBeDifferentFromPreviousUsedPassword(_: Void = ()) -> String {
        return NSLocalizedString("yourPasswordMustBeDifferentFromPreviousUsedPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your selfie is already verified.
      static func yourSelfieAlreadyVerified(_: Void = ()) -> String {
        return NSLocalizedString("yourSelfieAlreadyVerified", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: m
      static func meter(_: Void = ()) -> String {
        return NSLocalizedString("meter", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: place on this route
      static func placeOnThisRoute(_: Void = ()) -> String {
        return NSLocalizedString("placeOnThisRoute", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CommentCell.validate()
      try _FaqCell.validate()
      try _HomeFriendsPostCell.validate()
      try _HomeRouteCell.validate()
      try _HomeRouteSubCell.validate()
      try _HomeSuggestedFriendsCell.validate()
      try _MessageCell.validate()
      try _MyAchievementCell.validate()
      try _NearbyAdventureCell.validate()
      try _NearbyAdventurePeopleCell.validate()
      try _NotificationCell.validate()
      try _RouteLeaderboardCell.validate()
      try _RunWildRouteCell.validate()
      try _SupportCell.validate()
      try _SupportMessageCell.validate()
      try _SupportPicCell.validate()
      try _TrailCreatedRouteCell.validate()
      try _TrailSavedRouteCell.validate()
    }
    
    struct _CommentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CommentCell
      
      let bundle = R.hostingBundle
      let identifier = "CommentCell"
      let name = "CommentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_people_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_people_3' is used in nib 'CommentCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppLightGreenBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppLightGreenBgColor' is used in storyboard 'CommentCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'CommentCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextDarkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextDarkGrayColor' is used in storyboard 'CommentCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FaqCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FaqCell
      
      let bundle = R.hostingBundle
      let identifier = "FaqCell"
      let name = "FaqCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FaqCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FaqCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_faq_left_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_faq_left_icon' is used in nib 'FaqCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'FaqCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextFieldBorderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextFieldBorderColor' is used in storyboard 'FaqCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GenderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GenderCell
      
      let bundle = R.hostingBundle
      let identifier = "GenderCell"
      let name = "GenderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GenderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GenderCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeFriendsPostCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeFriendsPostCell
      
      let bundle = R.hostingBundle
      let identifier = "HomeFriendsPostCell"
      let name = "HomeFriendsPostCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeFriendsPostCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeFriendsPostCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "friends_post_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'friends_post_image' is used in nib 'HomeFriendsPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_post_comment_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_post_comment_icon' is used in nib 'HomeFriendsPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_post_like_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_post_like_icon' is used in nib 'HomeFriendsPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_post_share_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_post_share_icon' is used in nib 'HomeFriendsPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_post_views_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_post_views_icon' is used in nib 'HomeFriendsPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user_placeholder_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user_placeholder_image' is used in nib 'HomeFriendsPostCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgBlack' is used in storyboard 'HomeFriendsPostCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppLightBlueColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppLightBlueColor' is used in storyboard 'HomeFriendsPostCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'HomeFriendsPostCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightOrangeColor' is used in storyboard 'HomeFriendsPostCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeRouteCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeRouteCell
      
      let bundle = R.hostingBundle
      let identifier = "HomeRouteCell"
      let name = "HomeRouteCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeRouteCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeRouteCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_chevron_black_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chevron_black_down' is used in nib 'HomeRouteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chevron_black_up", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chevron_black_up' is used in nib 'HomeRouteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_map_overlay_btn_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_map_overlay_btn_icon' is used in nib 'HomeRouteCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'HomeRouteCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeRouteSubCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeRouteSubCell
      
      let bundle = R.hostingBundle
      let identifier = "HomeRouteSubCell"
      let name = "HomeRouteSubCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeRouteSubCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeRouteSubCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Route_Map", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Route_Map' is used in nib 'HomeRouteSubCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_location_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_location_icon' is used in nib 'HomeRouteSubCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_time_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_time_icon' is used in nib 'HomeRouteSubCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'HomeRouteSubCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightOrangeColor' is used in storyboard 'HomeRouteSubCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeSuggestedFriendsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeSuggestedFriendsCell
      
      let bundle = R.hostingBundle
      let identifier = "HomeSuggestedFriendsCell"
      let name = "HomeSuggestedFriendsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeSuggestedFriendsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSuggestedFriendsCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_add_friend_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_friend_icon' is used in nib 'HomeSuggestedFriendsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_delete_friend_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete_friend_icon' is used in nib 'HomeSuggestedFriendsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_people_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_people_3' is used in nib 'HomeSuggestedFriendsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgBlack' is used in storyboard 'HomeSuggestedFriendsCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'HomeSuggestedFriendsCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MapCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MapCell
      
      let bundle = R.hostingBundle
      let identifier = "MapCell"
      let name = "MapCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MapCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MapCell
      }
      
      fileprivate init() {}
    }
    
    struct _MapOverlayCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MapOverlayCell
      
      let bundle = R.hostingBundle
      let identifier = "MapOverlayCell"
      let name = "MapOverlayCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MapOverlayCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MapOverlayCell
      }
      
      fileprivate init() {}
    }
    
    struct _MessageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MessageCell
      
      let bundle = R.hostingBundle
      let identifier = "MessageCell"
      let name = "MessageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MessageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessageCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_chat_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chat_icon' is used in nib 'MessageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_people_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_people_3' is used in nib 'MessageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppLightGreenBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppLightGreenBgColor' is used in storyboard 'MessageCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'MessageCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MyAchievementCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyAchievementCell
      
      let bundle = R.hostingBundle
      let identifier = "MyAchievementCell"
      let name = "MyAchievementCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyAchievementCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyAchievementCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_gold_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_gold_icon' is used in nib 'MyAchievementCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_people_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_people_1' is used in nib 'MyAchievementCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'MyAchievementCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NearbyAdventureCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NearbyAdventureCell
      
      let bundle = R.hostingBundle
      let identifier = "NearbyAdventureCell"
      let name = "NearbyAdventureCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NearbyAdventureCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NearbyAdventureCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LoginBtnBgImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LoginBtnBgImage' is used in nib 'NearbyAdventureCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_adventure_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_adventure_image' is used in nib 'NearbyAdventureCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_hide_post", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_hide_post' is used in nib 'NearbyAdventureCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgBlack' is used in storyboard 'NearbyAdventureCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppTabbarBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppTabbarBgColor' is used in storyboard 'NearbyAdventureCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'NearbyAdventureCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextDarkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextDarkGrayColor' is used in storyboard 'NearbyAdventureCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightOrangeColor' is used in storyboard 'NearbyAdventureCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NearbyAdventurePeopleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NearbyAdventurePeopleCell
      
      let bundle = R.hostingBundle
      let identifier = "NearbyAdventurePeopleCell"
      let name = "NearbyAdventurePeopleCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NearbyAdventurePeopleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NearbyAdventurePeopleCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_user_placeholder_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user_placeholder_image' is used in nib 'NearbyAdventurePeopleCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgBlack' is used in storyboard 'NearbyAdventurePeopleCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NotificationCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NotificationCell
      
      let bundle = R.hostingBundle
      let identifier = "NotificationCell"
      let name = "NotificationCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "GoWildIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GoWildIcon' is used in nib 'NotificationCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'NotificationCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextFieldBorderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextFieldBorderColor' is used in storyboard 'NotificationCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightYellow' is used in storyboard 'NotificationCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _RouteLeaderboardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RouteLeaderboardCell
      
      let bundle = R.hostingBundle
      let identifier = "RouteLeaderboardCell"
      let name = "RouteLeaderboardCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RouteLeaderboardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RouteLeaderboardCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_people", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_people' is used in nib 'RouteLeaderboardCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgBlack' is used in storyboard 'RouteLeaderboardCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _RunWildRouteCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RunWildRouteCell
      
      let bundle = R.hostingBundle
      let identifier = "RunWildRouteCell"
      let name = "RunWildRouteCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RunWildRouteCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RunWildRouteCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_chevron_black_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chevron_black_down' is used in nib 'RunWildRouteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chevron_black_up", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chevron_black_up' is used in nib 'RunWildRouteCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'RunWildRouteCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SettingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SettingCell
      
      let bundle = R.hostingBundle
      let identifier = "SettingCell"
      let name = "SettingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingCell
      }
      
      fileprivate init() {}
    }
    
    struct _SponsoredCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SponsoredCell
      
      let bundle = R.hostingBundle
      let identifier = "SponsoredCell"
      let name = "SponsoredCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SponsoredCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SponsoredCell
      }
      
      fileprivate init() {}
    }
    
    struct _SupportAttachmentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SupportAttachmentCell
      
      let bundle = R.hostingBundle
      let identifier = "SupportAttachmentCell"
      let name = "SupportAttachmentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupportAttachmentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupportAttachmentCell
      }
      
      fileprivate init() {}
    }
    
    struct _SupportCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SupportCell
      
      let bundle = R.hostingBundle
      let identifier = "SupportCell"
      let name = "SupportCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupportCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupportCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_user_placeholder_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user_placeholder_image' is used in nib 'SupportCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'SupportCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextFieldBorderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextFieldBorderColor' is used in storyboard 'SupportCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightYellow' is used in storyboard 'SupportCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SupportMessageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SupportMessageCell
      
      let bundle = R.hostingBundle
      let identifier = "SupportMessageCell"
      let name = "SupportMessageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupportMessageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupportMessageCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in nib 'SupportMessageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'SupportMessageCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightYellow' is used in storyboard 'SupportMessageCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SupportPicCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SupportPicCell
      
      let bundle = R.hostingBundle
      let identifier = "SupportPicCell"
      let name = "SupportPicCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SupportPicCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SupportPicCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_delete_pic_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete_pic_image' is used in nib 'SupportPicCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TrailCreatedRouteCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TrailCreatedRouteCell
      
      let bundle = R.hostingBundle
      let identifier = "TrailCreatedRouteCell"
      let name = "TrailCreatedRouteCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TrailCreatedRouteCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrailCreatedRouteCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Route_Map", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Route_Map' is used in nib 'TrailCreatedRouteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_delete_route_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete_route_icon' is used in nib 'TrailCreatedRouteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit_route_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit_route_icon' is used in nib 'TrailCreatedRouteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_location_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_location_icon' is used in nib 'TrailCreatedRouteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_people", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_people' is used in nib 'TrailCreatedRouteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share_route_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share_route_icon' is used in nib 'TrailCreatedRouteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_time_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_time_icon' is used in nib 'TrailCreatedRouteCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgBlack' is used in storyboard 'TrailCreatedRouteCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'TrailCreatedRouteCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightOrangeColor' is used in storyboard 'TrailCreatedRouteCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TrailSavedRouteCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TrailSavedRouteCell
      
      let bundle = R.hostingBundle
      let identifier = "TrailSavedRouteCell"
      let name = "TrailSavedRouteCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TrailSavedRouteCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrailSavedRouteCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Route_Map", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Route_Map' is used in nib 'TrailSavedRouteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_location_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_location_icon' is used in nib 'TrailSavedRouteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_time_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_time_icon' is used in nib 'TrailSavedRouteCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'TrailSavedRouteCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightOrangeColor' is used in storyboard 'TrailSavedRouteCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try authSB.validate()
      try cameraSB.validate()
      try homeSB.validate()
      try launchScreen.validate()
      try mainTabbarSB.validate()
      try mapSB.validate()
      try messageSB.validate()
      try myTrailsSB.validate()
      try onlineStoreSB.validate()
      try profileSB.validate()
      try runWildSB.validate()
      try splashSB.validate()
      try supportSB.validate()
      try tryRouteSB.validate()
    }
    
    struct authSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let authNavigationVC = StoryboardViewControllerResource<AuthNavigationVC>(identifier: "AuthNavigationVC")
      let bundle = R.hostingBundle
      let createNewPasswordVC = StoryboardViewControllerResource<CreateNewPasswordVC>(identifier: "CreateNewPasswordVC")
      let eWaiverVC = StoryboardViewControllerResource<EWaiverVC>(identifier: "EWaiverVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let name = "AuthSB"
      let privacyPolicyVC = StoryboardViewControllerResource<PrivacyPolicyVC>(identifier: "PrivacyPolicyVC")
      let resetPasswordVC = StoryboardViewControllerResource<ResetPasswordVC>(identifier: "ResetPasswordVC")
      let signupVC = StoryboardViewControllerResource<SignupVC>(identifier: "SignupVC")
      let verifyPhoneVC = StoryboardViewControllerResource<VerifyPhoneVC>(identifier: "VerifyPhoneVC")
      
      func authNavigationVC(_: Void = ()) -> AuthNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: authNavigationVC)
      }
      
      func createNewPasswordVC(_: Void = ()) -> CreateNewPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createNewPasswordVC)
      }
      
      func eWaiverVC(_: Void = ()) -> EWaiverVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eWaiverVC)
      }
      
      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }
      
      func privacyPolicyVC(_: Void = ()) -> PrivacyPolicyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: privacyPolicyVC)
      }
      
      func resetPasswordVC(_: Void = ()) -> ResetPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordVC)
      }
      
      func signupVC(_: Void = ()) -> SignupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupVC)
      }
      
      func verifyPhoneVC(_: Void = ()) -> VerifyPhoneVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verifyPhoneVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LoginBtnBgImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LoginBtnBgImage' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fbLoginImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fbLoginImage' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "googleLoginImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'googleLoginImage' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_icon' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheck_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_uncheck_icon' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loginStemImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loginStemImage' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgColor' is used in storyboard 'AuthSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppLightBrownColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppLightBrownColor' is used in storyboard 'AuthSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextFieldBorderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextFieldBorderColor' is used in storyboard 'AuthSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightOrangeColor' is used in storyboard 'AuthSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightYellow' is used in storyboard 'AuthSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appBoxesColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBoxesColor' is used in storyboard 'AuthSB', but couldn't be loaded.") }
        }
        if _R.storyboard.authSB().authNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'authNavigationVC' could not be loaded from storyboard 'AuthSB' as 'AuthNavigationVC'.") }
        if _R.storyboard.authSB().createNewPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createNewPasswordVC' could not be loaded from storyboard 'AuthSB' as 'CreateNewPasswordVC'.") }
        if _R.storyboard.authSB().eWaiverVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eWaiverVC' could not be loaded from storyboard 'AuthSB' as 'EWaiverVC'.") }
        if _R.storyboard.authSB().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'AuthSB' as 'LoginVC'.") }
        if _R.storyboard.authSB().privacyPolicyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'privacyPolicyVC' could not be loaded from storyboard 'AuthSB' as 'PrivacyPolicyVC'.") }
        if _R.storyboard.authSB().resetPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordVC' could not be loaded from storyboard 'AuthSB' as 'ResetPasswordVC'.") }
        if _R.storyboard.authSB().signupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupVC' could not be loaded from storyboard 'AuthSB' as 'SignupVC'.") }
        if _R.storyboard.authSB().verifyPhoneVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verifyPhoneVC' could not be loaded from storyboard 'AuthSB' as 'VerifyPhoneVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct cameraSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let camerARVC = StoryboardViewControllerResource<CamerARVC>(identifier: "CamerARVC")
      let name = "CameraSB"
      
      func camerARVC(_: Void = ()) -> CamerARVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: camerARVC)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgColor' is used in storyboard 'CameraSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightOrangeColor' is used in storyboard 'CameraSB', but couldn't be loaded.") }
        }
        if _R.storyboard.cameraSB().camerARVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'camerARVC' could not be loaded from storyboard 'CameraSB' as 'CamerARVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct homeSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let commentVC = StoryboardViewControllerResource<CommentVC>(identifier: "CommentVC")
      let friendRequestVC = StoryboardViewControllerResource<FriendRequestVC>(identifier: "FriendRequestVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let mapOverlayVC = StoryboardViewControllerResource<MapOverlayVC>(identifier: "MapOverlayVC")
      let name = "HomeSB"
      let postDetailVC = StoryboardViewControllerResource<PostDetailVC>(identifier: "PostDetailVC")
      
      func commentVC(_: Void = ()) -> CommentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentVC)
      }
      
      func friendRequestVC(_: Void = ()) -> FriendRequestVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: friendRequestVC)
      }
      
      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }
      
      func mapOverlayVC(_: Void = ()) -> MapOverlayVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapOverlayVC)
      }
      
      func postDetailVC(_: Void = ()) -> PostDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: postDetailVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "add_image_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add_image_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "friend_request_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'friend_request_bg' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_bg' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_attachment_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_attachment_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chevron_black_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chevron_black_down' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chevron_black_up", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chevron_black_up' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chevron_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chevron_down' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_delete_pic_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete_pic_image' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_map_overlay_btn_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_map_overlay_btn_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_new_post_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_new_post_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_people", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_people' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_icon' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send_message", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_send_message' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_zoom_in_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_zoom_in_image' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_zoom_out_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_zoom_out_image' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pdf_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pdf_image' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgBlack' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppChatBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppChatBgColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppOrangeBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppOrangeBgColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppRedColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppRedColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppTabbarBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppTabbarBgColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextDarkOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextDarkOrangeColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextFieldBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextFieldBgColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextFieldBorderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextFieldBorderColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightOrangeColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightYellow' is used in storyboard 'HomeSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appBoxesColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBoxesColor' is used in storyboard 'HomeSB', but couldn't be loaded.") }
        }
        if _R.storyboard.homeSB().commentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentVC' could not be loaded from storyboard 'HomeSB' as 'CommentVC'.") }
        if _R.storyboard.homeSB().friendRequestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'friendRequestVC' could not be loaded from storyboard 'HomeSB' as 'FriendRequestVC'.") }
        if _R.storyboard.homeSB().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'HomeSB' as 'HomeVC'.") }
        if _R.storyboard.homeSB().mapOverlayVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapOverlayVC' could not be loaded from storyboard 'HomeSB' as 'MapOverlayVC'.") }
        if _R.storyboard.homeSB().postDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'postDetailVC' could not be loaded from storyboard 'HomeSB' as 'PostDetailVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "SplashImageOne", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SplashImageOne' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct mainTabbarSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mainContainerVC = StoryboardViewControllerResource<MainContainerVC>(identifier: "MainContainerVC")
      let mainTabbarNavigationVC = StoryboardViewControllerResource<MainTabbarNavigationVC>(identifier: "MainTabbarNavigationVC")
      let mainTabbarPageVC = StoryboardViewControllerResource<MainTabbarPageVC>(identifier: "MainTabbarPageVC")
      let name = "MainTabbarSB"
      
      func mainContainerVC(_: Void = ()) -> MainContainerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainContainerVC)
      }
      
      func mainTabbarNavigationVC(_: Void = ()) -> MainTabbarNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabbarNavigationVC)
      }
      
      func mainTabbarPageVC(_: Void = ()) -> MainTabbarPageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabbarPageVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_tabbar_camera_ar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tabbar_camera_ar' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tabbar_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tabbar_home' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tabbar_map", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tabbar_map' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tabbar_online_store", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tabbar_online_store' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tabbar_profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tabbar_profile' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgColor' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppTabbarBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppTabbarBgColor' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightOrangeColor' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appRedColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appRedColor' is used in storyboard 'MainTabbarSB', but couldn't be loaded.") }
        }
        if _R.storyboard.mainTabbarSB().mainContainerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainContainerVC' could not be loaded from storyboard 'MainTabbarSB' as 'MainContainerVC'.") }
        if _R.storyboard.mainTabbarSB().mainTabbarNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabbarNavigationVC' could not be loaded from storyboard 'MainTabbarSB' as 'MainTabbarNavigationVC'.") }
        if _R.storyboard.mainTabbarSB().mainTabbarPageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabbarPageVC' could not be loaded from storyboard 'MainTabbarSB' as 'MainTabbarPageVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mapSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let eventRegisterVC = StoryboardViewControllerResource<EventRegisterVC>(identifier: "EventRegisterVC")
      let eventVerifyVC = StoryboardViewControllerResource<EventVerifyVC>(identifier: "EventVerifyVC")
      let genderVC = StoryboardViewControllerResource<GenderVC>(identifier: "GenderVC")
      let mapVC = StoryboardViewControllerResource<MapVC>(identifier: "MapVC")
      let name = "MapSB"
      let treasureWildContainerVC = StoryboardViewControllerResource<TreasureWildContainerVC>(identifier: "TreasureWildContainerVC")
      let treasureWildOnGoingVC = StoryboardViewControllerResource<TreasureWildOnGoingVC>(identifier: "TreasureWildOnGoingVC")
      let treasureWildUpCommingVC = StoryboardViewControllerResource<TreasureWildUpCommingVC>(identifier: "TreasureWildUpCommingVC")
      let treasureWildVC = StoryboardViewControllerResource<TreasureWildVC>(identifier: "TreasureWildVC")
      
      func eventRegisterVC(_: Void = ()) -> EventRegisterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventRegisterVC)
      }
      
      func eventVerifyVC(_: Void = ()) -> EventVerifyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventVerifyVC)
      }
      
      func genderVC(_: Void = ()) -> GenderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: genderVC)
      }
      
      func mapVC(_: Void = ()) -> MapVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapVC)
      }
      
      func treasureWildContainerVC(_: Void = ()) -> TreasureWildContainerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: treasureWildContainerVC)
      }
      
      func treasureWildOnGoingVC(_: Void = ()) -> TreasureWildOnGoingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: treasureWildOnGoingVC)
      }
      
      func treasureWildUpCommingVC(_: Void = ()) -> TreasureWildUpCommingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: treasureWildUpCommingVC)
      }
      
      func treasureWildVC(_: Void = ()) -> TreasureWildVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: treasureWildVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LoginBtnBgImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LoginBtnBgImage' is used in storyboard 'MapSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'MapSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_adventure_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_adventure_image' is used in storyboard 'MapSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_icon' is used in storyboard 'MapSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_calender_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calender_icon' is used in storyboard 'MapSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_drop_down_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_drop_down_icon' is used in storyboard 'MapSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_event_detail_bg_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_event_detail_bg_image' is used in storyboard 'MapSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgBlack' is used in storyboard 'MapSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgColor' is used in storyboard 'MapSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppOrangeBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppOrangeBgColor' is used in storyboard 'MapSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'MapSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextDarkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextDarkGrayColor' is used in storyboard 'MapSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextFieldBorderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextFieldBorderColor' is used in storyboard 'MapSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightOrangeColor' is used in storyboard 'MapSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightYellow' is used in storyboard 'MapSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appBoxesColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBoxesColor' is used in storyboard 'MapSB', but couldn't be loaded.") }
        }
        if _R.storyboard.mapSB().eventRegisterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventRegisterVC' could not be loaded from storyboard 'MapSB' as 'EventRegisterVC'.") }
        if _R.storyboard.mapSB().eventVerifyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventVerifyVC' could not be loaded from storyboard 'MapSB' as 'EventVerifyVC'.") }
        if _R.storyboard.mapSB().genderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'genderVC' could not be loaded from storyboard 'MapSB' as 'GenderVC'.") }
        if _R.storyboard.mapSB().mapVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapVC' could not be loaded from storyboard 'MapSB' as 'MapVC'.") }
        if _R.storyboard.mapSB().treasureWildContainerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'treasureWildContainerVC' could not be loaded from storyboard 'MapSB' as 'TreasureWildContainerVC'.") }
        if _R.storyboard.mapSB().treasureWildOnGoingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'treasureWildOnGoingVC' could not be loaded from storyboard 'MapSB' as 'TreasureWildOnGoingVC'.") }
        if _R.storyboard.mapSB().treasureWildUpCommingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'treasureWildUpCommingVC' could not be loaded from storyboard 'MapSB' as 'TreasureWildUpCommingVC'.") }
        if _R.storyboard.mapSB().treasureWildVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'treasureWildVC' could not be loaded from storyboard 'MapSB' as 'TreasureWildVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct messageSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let chatVC = StoryboardViewControllerResource<ChatVC>(identifier: "ChatVC")
      let messagesVC = StoryboardViewControllerResource<MessagesVC>(identifier: "MessagesVC")
      let name = "MessageSB"
      
      func chatVC(_: Void = ()) -> ChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatVC)
      }
      
      func messagesVC(_: Void = ()) -> MessagesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messagesVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_icon' is used in storyboard 'MessageSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppChatBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppChatBgColor' is used in storyboard 'MessageSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightYellow' is used in storyboard 'MessageSB', but couldn't be loaded.") }
        }
        if _R.storyboard.messageSB().chatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'MessageSB' as 'ChatVC'.") }
        if _R.storyboard.messageSB().messagesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messagesVC' could not be loaded from storyboard 'MessageSB' as 'MessagesVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct myTrailsSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let myTrailsContainerVC = StoryboardViewControllerResource<MyTrailsContainerVC>(identifier: "MyTrailsContainerVC")
      let myTrailsCreateNewRouteVC = StoryboardViewControllerResource<MyTrailsCreateNewRouteVC>(identifier: "MyTrailsCreateNewRouteVC")
      let myTrailsCreatedRouteVC = StoryboardViewControllerResource<MyTrailsCreatedRouteVC>(identifier: "MyTrailsCreatedRouteVC")
      let myTrailsSavedRouteVC = StoryboardViewControllerResource<MyTrailsSavedRouteVC>(identifier: "MyTrailsSavedRouteVC")
      let myTrailsVC = StoryboardViewControllerResource<MyTrailsVC>(identifier: "MyTrailsVC")
      let name = "MyTrailsSB"
      
      func myTrailsContainerVC(_: Void = ()) -> MyTrailsContainerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myTrailsContainerVC)
      }
      
      func myTrailsCreateNewRouteVC(_: Void = ()) -> MyTrailsCreateNewRouteVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myTrailsCreateNewRouteVC)
      }
      
      func myTrailsCreatedRouteVC(_: Void = ()) -> MyTrailsCreatedRouteVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myTrailsCreatedRouteVC)
      }
      
      func myTrailsSavedRouteVC(_: Void = ()) -> MyTrailsSavedRouteVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myTrailsSavedRouteVC)
      }
      
      func myTrailsVC(_: Void = ()) -> MyTrailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myTrailsVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LoginBtnBgImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LoginBtnBgImage' is used in storyboard 'MyTrailsSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_icon' is used in storyboard 'MyTrailsSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_create_trails_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_create_trails_icon' is used in storyboard 'MyTrailsSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_delete_route_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete_route_icon' is used in storyboard 'MyTrailsSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_destination_location_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_destination_location_image' is used in storyboard 'MyTrailsSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_source_location_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_source_location_image' is used in storyboard 'MyTrailsSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_zoom_in_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_zoom_in_image' is used in storyboard 'MyTrailsSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_zoom_out_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_zoom_out_image' is used in storyboard 'MyTrailsSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgColor' is used in storyboard 'MyTrailsSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppOrangeBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppOrangeBgColor' is used in storyboard 'MyTrailsSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextFieldBorderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextFieldBorderColor' is used in storyboard 'MyTrailsSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightOrangeColor' is used in storyboard 'MyTrailsSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightYellow' is used in storyboard 'MyTrailsSB', but couldn't be loaded.") }
        }
        if _R.storyboard.myTrailsSB().myTrailsContainerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myTrailsContainerVC' could not be loaded from storyboard 'MyTrailsSB' as 'MyTrailsContainerVC'.") }
        if _R.storyboard.myTrailsSB().myTrailsCreateNewRouteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myTrailsCreateNewRouteVC' could not be loaded from storyboard 'MyTrailsSB' as 'MyTrailsCreateNewRouteVC'.") }
        if _R.storyboard.myTrailsSB().myTrailsCreatedRouteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myTrailsCreatedRouteVC' could not be loaded from storyboard 'MyTrailsSB' as 'MyTrailsCreatedRouteVC'.") }
        if _R.storyboard.myTrailsSB().myTrailsSavedRouteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myTrailsSavedRouteVC' could not be loaded from storyboard 'MyTrailsSB' as 'MyTrailsSavedRouteVC'.") }
        if _R.storyboard.myTrailsSB().myTrailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myTrailsVC' could not be loaded from storyboard 'MyTrailsSB' as 'MyTrailsVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct onlineStoreSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnlineStoreSB"
      let onlineStoreVC = StoryboardViewControllerResource<OnlineStoreVC>(identifier: "OnlineStoreVC")
      
      func onlineStoreVC(_: Void = ()) -> OnlineStoreVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onlineStoreVC)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgColor' is used in storyboard 'OnlineStoreSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightOrangeColor' is used in storyboard 'OnlineStoreSB', but couldn't be loaded.") }
        }
        if _R.storyboard.onlineStoreSB().onlineStoreVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onlineStoreVC' could not be loaded from storyboard 'OnlineStoreSB' as 'OnlineStoreVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct profileSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let faqVC = StoryboardViewControllerResource<FaqVC>(identifier: "FaqVC")
      let myAchievementsVC = StoryboardViewControllerResource<MyAchievementsVC>(identifier: "MyAchievementsVC")
      let myRacesVC = StoryboardViewControllerResource<MyRacesVC>(identifier: "MyRacesVC")
      let name = "ProfileSB"
      let notificationsVC = StoryboardViewControllerResource<NotificationsVC>(identifier: "NotificationsVC")
      let profileVC = StoryboardViewControllerResource<ProfileVC>(identifier: "ProfileVC")
      let selfieVerificationVC = StoryboardViewControllerResource<SelfieVerificationVC>(identifier: "SelfieVerificationVC")
      let settingVC = StoryboardViewControllerResource<SettingVC>(identifier: "SettingVC")
      
      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }
      
      func faqVC(_: Void = ()) -> FaqVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: faqVC)
      }
      
      func myAchievementsVC(_: Void = ()) -> MyAchievementsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myAchievementsVC)
      }
      
      func myRacesVC(_: Void = ()) -> MyRacesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myRacesVC)
      }
      
      func notificationsVC(_: Void = ()) -> NotificationsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsVC)
      }
      
      func profileVC(_: Void = ()) -> ProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileVC)
      }
      
      func selfieVerificationVC(_: Void = ()) -> SelfieVerificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selfieVerificationVC)
      }
      
      func settingVC(_: Void = ()) -> SettingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LoginBtnBgImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LoginBtnBgImage' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_icon' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_people", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_people' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_people_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_people_3' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_tree_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profile_tree_image' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_tree_image_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profile_tree_image_1' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextDarkOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextDarkOrangeColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextFieldBorderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextFieldBorderColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightYellow' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "appBoxesColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'appBoxesColor' is used in storyboard 'ProfileSB', but couldn't be loaded.") }
        }
        if _R.storyboard.profileSB().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'ProfileSB' as 'EditProfileVC'.") }
        if _R.storyboard.profileSB().faqVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'faqVC' could not be loaded from storyboard 'ProfileSB' as 'FaqVC'.") }
        if _R.storyboard.profileSB().myAchievementsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myAchievementsVC' could not be loaded from storyboard 'ProfileSB' as 'MyAchievementsVC'.") }
        if _R.storyboard.profileSB().myRacesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myRacesVC' could not be loaded from storyboard 'ProfileSB' as 'MyRacesVC'.") }
        if _R.storyboard.profileSB().notificationsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsVC' could not be loaded from storyboard 'ProfileSB' as 'NotificationsVC'.") }
        if _R.storyboard.profileSB().profileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'ProfileSB' as 'ProfileVC'.") }
        if _R.storyboard.profileSB().selfieVerificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selfieVerificationVC' could not be loaded from storyboard 'ProfileSB' as 'SelfieVerificationVC'.") }
        if _R.storyboard.profileSB().settingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingVC' could not be loaded from storyboard 'ProfileSB' as 'SettingVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct runWildSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let leaderboardVC = StoryboardViewControllerResource<LeaderboardVC>(identifier: "LeaderboardVC")
      let myAchievementsDetailVC = StoryboardViewControllerResource<MyAchievementsDetailVC>(identifier: "MyAchievementsDetailVC")
      let name = "RunWildSB"
      let routeDetailVC = StoryboardViewControllerResource<RouteDetailVC>(identifier: "RouteDetailVC")
      let runWildVC = StoryboardViewControllerResource<RunWildVC>(identifier: "RunWildVC")
      
      func leaderboardVC(_: Void = ()) -> LeaderboardVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: leaderboardVC)
      }
      
      func myAchievementsDetailVC(_: Void = ()) -> MyAchievementsDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myAchievementsDetailVC)
      }
      
      func routeDetailVC(_: Void = ()) -> RouteDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: routeDetailVC)
      }
      
      func runWildVC(_: Void = ()) -> RunWildVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: runWildVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_icon' is used in storyboard 'RunWildSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chevron_black_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chevron_black_down' is used in storyboard 'RunWildSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chevron_black_up", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chevron_black_up' is used in storyboard 'RunWildSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_map_overlay_btn_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_map_overlay_btn_icon' is used in storyboard 'RunWildSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user_placeholder_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user_placeholder_image' is used in storyboard 'RunWildSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_zoom_in_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_zoom_in_image' is used in storyboard 'RunWildSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_zoom_out_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_zoom_out_image' is used in storyboard 'RunWildSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgBlack' is used in storyboard 'RunWildSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgColor' is used in storyboard 'RunWildSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'RunWildSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextDarkGrayColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextDarkGrayColor' is used in storyboard 'RunWildSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextDarkOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextDarkOrangeColor' is used in storyboard 'RunWildSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightYellow' is used in storyboard 'RunWildSB', but couldn't be loaded.") }
        }
        if _R.storyboard.runWildSB().leaderboardVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'leaderboardVC' could not be loaded from storyboard 'RunWildSB' as 'LeaderboardVC'.") }
        if _R.storyboard.runWildSB().myAchievementsDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myAchievementsDetailVC' could not be loaded from storyboard 'RunWildSB' as 'MyAchievementsDetailVC'.") }
        if _R.storyboard.runWildSB().routeDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'routeDetailVC' could not be loaded from storyboard 'RunWildSB' as 'RouteDetailVC'.") }
        if _R.storyboard.runWildSB().runWildVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'runWildVC' could not be loaded from storyboard 'RunWildSB' as 'RunWildVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct splashSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let customSplashNavigationVC = StoryboardViewControllerResource<CustomSplashNavigationVC>(identifier: "CustomSplashNavigationVC")
      let name = "SplashSB"
      let splashVC = StoryboardViewControllerResource<SplashVC>(identifier: "SplashVC")
      
      func customSplashNavigationVC(_: Void = ()) -> CustomSplashNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customSplashNavigationVC)
      }
      
      func splashVC(_: Void = ()) -> SplashVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "GoWildIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GoWildIcon' is used in storyboard 'SplashSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "customSplashBG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'customSplashBG' is used in storyboard 'SplashSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splashBtnIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splashBtnIcon' is used in storyboard 'SplashSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.splashSB().customSplashNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customSplashNavigationVC' could not be loaded from storyboard 'SplashSB' as 'CustomSplashNavigationVC'.") }
        if _R.storyboard.splashSB().splashVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashVC' could not be loaded from storyboard 'SplashSB' as 'SplashVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct supportSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SupportSB"
      let newTicketVC = StoryboardViewControllerResource<NewTicketVC>(identifier: "NewTicketVC")
      let supportMessageVC = StoryboardViewControllerResource<SupportMessageVC>(identifier: "SupportMessageVC")
      let supportVC = StoryboardViewControllerResource<SupportVC>(identifier: "SupportVC")
      
      func newTicketVC(_: Void = ()) -> NewTicketVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newTicketVC)
      }
      
      func supportMessageVC(_: Void = ()) -> SupportMessageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: supportMessageVC)
      }
      
      func supportVC(_: Void = ()) -> SupportVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: supportVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LoginBtnBgImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LoginBtnBgImage' is used in storyboard 'SupportSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_icon' is used in storyboard 'SupportSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_camera_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera_image' is used in storyboard 'SupportSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_send_icon' is used in storyboard 'SupportSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgBlack' is used in storyboard 'SupportSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgColor' is used in storyboard 'SupportSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppWhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhiteColor' is used in storyboard 'SupportSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextFieldBorderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextFieldBorderColor' is used in storyboard 'SupportSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightYellow' is used in storyboard 'SupportSB', but couldn't be loaded.") }
        }
        if _R.storyboard.supportSB().newTicketVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newTicketVC' could not be loaded from storyboard 'SupportSB' as 'NewTicketVC'.") }
        if _R.storyboard.supportSB().supportMessageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'supportMessageVC' could not be loaded from storyboard 'SupportSB' as 'SupportMessageVC'.") }
        if _R.storyboard.supportSB().supportVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'supportVC' could not be loaded from storyboard 'SupportSB' as 'SupportVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct tryRouteSB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mapBoxTryRouteNavigationVC = StoryboardViewControllerResource<MapBoxTryRouteNavigationVC>(identifier: "MapBoxTryRouteNavigationVC")
      let mapBoxTryTreasureChestVC = StoryboardViewControllerResource<MapBoxTryTreasureChestVC>(identifier: "MapBoxTryTreasureChestVC")
      let name = "TryRouteSB"
      let tryRouteNavigationVC = StoryboardViewControllerResource<TryRouteNavigationVC>(identifier: "TryRouteNavigationVC")
      let tryRouteVC = StoryboardViewControllerResource<TryRouteVC>(identifier: "TryRouteVC")
      let tryTreasureChestVC = StoryboardViewControllerResource<TryTreasureChestVC>(identifier: "TryTreasureChestVC")
      
      func mapBoxTryRouteNavigationVC(_: Void = ()) -> MapBoxTryRouteNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapBoxTryRouteNavigationVC)
      }
      
      func mapBoxTryTreasureChestVC(_: Void = ()) -> MapBoxTryTreasureChestVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapBoxTryTreasureChestVC)
      }
      
      func tryRouteNavigationVC(_: Void = ()) -> TryRouteNavigationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tryRouteNavigationVC)
      }
      
      func tryRouteVC(_: Void = ()) -> TryRouteVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tryRouteVC)
      }
      
      func tryTreasureChestVC(_: Void = ()) -> TryTreasureChestVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tryTreasureChestVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LoginBtnBgImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LoginBtnBgImage' is used in storyboard 'TryRouteSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_icon' is used in storyboard 'TryRouteSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_map_overlay_btn_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_map_overlay_btn_icon' is used in storyboard 'TryRouteSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_old_paper", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_old_paper' is used in storyboard 'TryRouteSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_satellite_map", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_satellite_map' is used in storyboard 'TryRouteSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_zoom_in_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_zoom_in_image' is used in storyboard 'TryRouteSB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_zoom_out_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_zoom_out_image' is used in storyboard 'TryRouteSB', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "AppBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBgColor' is used in storyboard 'TryRouteSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextDarkOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextDarkOrangeColor' is used in storyboard 'TryRouteSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextFieldBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextFieldBgColor' is used in storyboard 'TryRouteSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightOrangeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightOrangeColor' is used in storyboard 'TryRouteSB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextLightYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightYellow' is used in storyboard 'TryRouteSB', but couldn't be loaded.") }
        }
        if _R.storyboard.tryRouteSB().mapBoxTryRouteNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapBoxTryRouteNavigationVC' could not be loaded from storyboard 'TryRouteSB' as 'MapBoxTryRouteNavigationVC'.") }
        if _R.storyboard.tryRouteSB().mapBoxTryTreasureChestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapBoxTryTreasureChestVC' could not be loaded from storyboard 'TryRouteSB' as 'MapBoxTryTreasureChestVC'.") }
        if _R.storyboard.tryRouteSB().tryRouteNavigationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tryRouteNavigationVC' could not be loaded from storyboard 'TryRouteSB' as 'TryRouteNavigationVC'.") }
        if _R.storyboard.tryRouteSB().tryRouteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tryRouteVC' could not be loaded from storyboard 'TryRouteSB' as 'TryRouteVC'.") }
        if _R.storyboard.tryRouteSB().tryTreasureChestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tryTreasureChestVC' could not be loaded from storyboard 'TryRouteSB' as 'TryTreasureChestVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
